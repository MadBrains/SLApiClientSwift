//
// AnalyticsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AnalyticsAPI {
    /**
     Количество уникальных просмотров в заданный промежуток времени
     
     - parameter itemId: (path) Идентификатор элемента 
     - parameter beginTime: (query) Таймштамп начала выборки. Если 0 или не указан то ограничение отсутствует. (optional)
     - parameter endTime: (query) Таймштамп окончания выборки. Если 0 или не указан то ограничение отсутствует. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsCatalogShowItemByItemid(itemId: String, beginTime: Int64? = nil, endTime: Int64? = nil, completion: @escaping ((_ data: AnalyticsResponse?,_ error: Error?) -> Void)) {
        getAnalyticsCatalogShowItemByItemidWithRequestBuilder(itemId: itemId, beginTime: beginTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Количество уникальных просмотров в заданный промежуток времени
     - GET /analytics/catalog/show/item/{itemId}/
     - Количество уникальных просмотров в заданный промежуток времени
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "result" : 0
}}]
     
     - parameter itemId: (path) Идентификатор элемента 
     - parameter beginTime: (query) Таймштамп начала выборки. Если 0 или не указан то ограничение отсутствует. (optional)
     - parameter endTime: (query) Таймштамп окончания выборки. Если 0 или не указан то ограничение отсутствует. (optional)

     - returns: RequestBuilder<AnalyticsResponse> 
     */
    open class func getAnalyticsCatalogShowItemByItemidWithRequestBuilder(itemId: String, beginTime: Int64? = nil, endTime: Int64? = nil) -> RequestBuilder<AnalyticsResponse> {
        var path = "/analytics/catalog/show/item/{itemId}/"
        path = path.replacingOccurrences(of: "{itemId}", with: "\(itemId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "beginTime": beginTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<AnalyticsResponse>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter query
     */
    public enum Query_getAnalyticsOrdersStatus: String { 
        case ids = "ids"
        case users = "users"
    }

    /**
     * enum for parameter status
     */
    public enum Status_getAnalyticsOrdersStatus: String { 
        case cart = "cart"
        case create = "create"
        case confirmed = "confirmed"
        case await = "await"
        case pay = "pay"
        case delivery = "delivery"
        case complete = "complete"
        case cancelled = "cancelled"
        case rejected = "rejected"
    }

    /**
     Выборка из заказов за указанный промежуток времени по статусу.
     
     - parameter query: (query) Результаты выборки * ids - идентификаторы заказов * users - идентификаторы пользователей заказов без повторений  
     - parameter status: (query) Статус окончательно установленный в данном временном промежутке и не изменившийся до текущего времени * cart - корзина, заказ еще формируется * create - создан * confirmed - подтвержден * await - ожидает подтвержения * pay - ожидает оплаты * delivery - доставка * complete - выполнен * cancelled - отменен * rejected - отклонен   
     - parameter beginTime: (query) Таймштамп начала выборки. Если 0 или не указан то ограничение отсутствует. (optional)
     - parameter endTime: (query) Таймштамп окончания выборки. Если 0 или не указан то ограничение отсутствует. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsOrdersStatus(query: Query_getAnalyticsOrdersStatus, status: Status_getAnalyticsOrdersStatus, beginTime: Int64? = nil, endTime: Int64? = nil, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getAnalyticsOrdersStatusWithRequestBuilder(query: query, status: status, beginTime: beginTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Выборка из заказов за указанный промежуток времени по статусу.
     - GET /analytics/orders/status/
     - Выборка заказов производится по указанному статусу окончательно установленном в данном временном промежутке и не изменившемся до текущего времени. Результат массив идентификаторов пользователей без дубликатов или идентификаторы заказа в зависимости от значения query
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     
     - parameter query: (query) Результаты выборки * ids - идентификаторы заказов * users - идентификаторы пользователей заказов без повторений  
     - parameter status: (query) Статус окончательно установленный в данном временном промежутке и не изменившийся до текущего времени * cart - корзина, заказ еще формируется * create - создан * confirmed - подтвержден * await - ожидает подтвержения * pay - ожидает оплаты * delivery - доставка * complete - выполнен * cancelled - отменен * rejected - отклонен   
     - parameter beginTime: (query) Таймштамп начала выборки. Если 0 или не указан то ограничение отсутствует. (optional)
     - parameter endTime: (query) Таймштамп окончания выборки. Если 0 или не указан то ограничение отсутствует. (optional)

     - returns: RequestBuilder<[String]> 
     */
    open class func getAnalyticsOrdersStatusWithRequestBuilder(query: Query_getAnalyticsOrdersStatus, status: Status_getAnalyticsOrdersStatus, beginTime: Int64? = nil, endTime: Int64? = nil) -> RequestBuilder<[String]> {
        let path = "/analytics/orders/status/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "beginTime": beginTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON(), 
            "query": query.rawValue, 
            "status": status.rawValue
        ])
        

        let requestBuilder: RequestBuilder<[String]>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getAnalyticsOrdersStatusCsv: String { 
        case items = "items"
        case services = "services"
    }

    /**
     * enum for parameter status
     */
    public enum Status_getAnalyticsOrdersStatusCsv: String { 
        case cart = "cart"
        case create = "create"
        case confirmed = "confirmed"
        case await = "await"
        case pay = "pay"
        case delivery = "delivery"
        case complete = "complete"
        case cancelled = "cancelled"
        case rejected = "rejected"
    }

    /**
     Выгрузка CSV по заказам
     
     - parameter fields: (query) Поля выбираемые для импорта из профиля пользователя и заказа. Пример корректного значения: &#39;login,communications.phone&#39; Описание см выше. 
     - parameter type: (query) Тип заказа: * items - покупка товаров * services - запись на сервис  
     - parameter status: (query) Статус окончательно установленный в данном временном промежутке и не изменившийся до текущего времени * cart - корзина, заказ еще формируется * create - создан * confirmed - подтвержден * await - ожидает подтвержения * pay - ожидает оплаты * delivery - доставка * complete - выполнен * cancelled - отменен * rejected - отклонен   
     - parameter beginTime: (query) Таймштамп начала выборки. Если 0 или не указан то ограничение отсутствует. (optional)
     - parameter endTime: (query) Таймштамп окончания выборки. Если 0 или не указан то ограничение отсутствует. (optional)
     - parameter fieldAliases: (query) Названия полей выбираемые для импорта в понятной человеку форме. Если параметр передан, то проверяется совпадение количества полей с полем fields (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsOrdersStatusCsv(fields: String, type: ModelType_getAnalyticsOrdersStatusCsv, status: Status_getAnalyticsOrdersStatusCsv, beginTime: Int64? = nil, endTime: Int64? = nil, fieldAliases: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getAnalyticsOrdersStatusCsvWithRequestBuilder(fields: fields, type: type, status: status, beginTime: beginTime, endTime: endTime, fieldAliases: fieldAliases).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Выгрузка CSV по заказам
     - GET /analytics/orders/status/csv/
     - Для экспорта доступны поля заказа и поля профиля пользователя. Поля профиля пользователя указываются префиксом **user**, заказа **order**. Для вывода данных в csv доступны все поля заказа и профиля пользователя по маске **user.***  и **order.***. Например: **?fields=user.firstName,order.status** вернет csv файл состоящий из двух колонок с именем пользователя и статусом заказа. При работе со свойствами заказов или пользователей указывается **order.properties.myprop**, в этом случае будет подставлено значение с ключем myprop (если значение больше одного, то они будут перечисленны через разделитель отличный от разделителя csv). Если значение свойства является объектом, то допустимо использование синтаксиса **order.properties.myprop.keyobj1**, в этом случае интерпритатор будет использовать из значения ключа myprop, ключ keyobj1 
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{output=none}]
     
     - parameter fields: (query) Поля выбираемые для импорта из профиля пользователя и заказа. Пример корректного значения: &#39;login,communications.phone&#39; Описание см выше. 
     - parameter type: (query) Тип заказа: * items - покупка товаров * services - запись на сервис  
     - parameter status: (query) Статус окончательно установленный в данном временном промежутке и не изменившийся до текущего времени * cart - корзина, заказ еще формируется * create - создан * confirmed - подтвержден * await - ожидает подтвержения * pay - ожидает оплаты * delivery - доставка * complete - выполнен * cancelled - отменен * rejected - отклонен   
     - parameter beginTime: (query) Таймштамп начала выборки. Если 0 или не указан то ограничение отсутствует. (optional)
     - parameter endTime: (query) Таймштамп окончания выборки. Если 0 или не указан то ограничение отсутствует. (optional)
     - parameter fieldAliases: (query) Названия полей выбираемые для импорта в понятной человеку форме. Если параметр передан, то проверяется совпадение количества полей с полем fields (optional)

     - returns: RequestBuilder<String> 
     */
    open class func getAnalyticsOrdersStatusCsvWithRequestBuilder(fields: String, type: ModelType_getAnalyticsOrdersStatusCsv, status: Status_getAnalyticsOrdersStatusCsv, beginTime: Int64? = nil, endTime: Int64? = nil, fieldAliases: String? = nil) -> RequestBuilder<String> {
        let path = "/analytics/orders/status/csv/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "beginTime": beginTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON(), 
            "fields": fields, 
            "fieldAliases": fieldAliases, 
            "type": type.rawValue, 
            "status": status.rawValue
        ])
        

        let requestBuilder: RequestBuilder<String>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Выборка пользователей когда-либо совершавших заказ.
     
     - parameter beginTime: (query) Таймштамп начала выборки. Если 0 или не указан то ограничение отсутствует. (optional)
     - parameter endTime: (query) Таймштамп окончания выборки. Если 0 или не указан то ограничение отсутствует. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsOrdersUsers(beginTime: Int64? = nil, endTime: Int64? = nil, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getAnalyticsOrdersUsersWithRequestBuilder(beginTime: beginTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Выборка пользователей когда-либо совершавших заказ.
     - GET /analytics/orders/users/
     - Выборка пользователей когда-либо совершавших заказ.
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     
     - parameter beginTime: (query) Таймштамп начала выборки. Если 0 или не указан то ограничение отсутствует. (optional)
     - parameter endTime: (query) Таймштамп окончания выборки. Если 0 или не указан то ограничение отсутствует. (optional)

     - returns: RequestBuilder<[String]> 
     */
    open class func getAnalyticsOrdersUsersWithRequestBuilder(beginTime: Int64? = nil, endTime: Int64? = nil) -> RequestBuilder<[String]> {
        let path = "/analytics/orders/users/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "beginTime": beginTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<[String]>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Статистика рассылки
     
     - parameter itemId: (path) Идентификатор элемента 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsPushByItemid(itemId: String, completion: @escaping ((_ data: AnalyticsPushResponse?,_ error: Error?) -> Void)) {
        getAnalyticsPushByItemidWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Статистика рассылки
     - GET /analytics/push/{itemId}/
     - Статистика по рассылке push уведомлений
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "received" : 6,
  "open" : 0
}}]
     
     - parameter itemId: (path) Идентификатор элемента 

     - returns: RequestBuilder<AnalyticsPushResponse> 
     */
    open class func getAnalyticsPushByItemidWithRequestBuilder(itemId: String) -> RequestBuilder<AnalyticsPushResponse> {
        var path = "/analytics/push/{itemId}/"
        path = path.replacingOccurrences(of: "{itemId}", with: "\(itemId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AnalyticsPushResponse>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Выгрузка CSV по push рассылке
     
     - parameter itemId: (path) Идентификатор элемента 
     - parameter fields: (query) Поля выбираемые для импорта из профиля пользователя. Пример корректного значения: &#39;login,communications.phone&#39; Описание см выше. 
     - parameter fieldAliases: (query) Названия полей выбираемые для импорта в понятной человеку форме. Если параметр передан, то проверяется совпадение количества полей с полем fields (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsPushByItemidUnopenedCsv(itemId: String, fields: String, fieldAliases: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getAnalyticsPushByItemidUnopenedCsvWithRequestBuilder(itemId: itemId, fields: fields, fieldAliases: fieldAliases).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Выгрузка CSV по push рассылке
     - GET /analytics/push/{itemId}/unopened/csv/
     - Выгрука CSV по push рассылке. Доступны все поля профиля пользователя.  Поля базовой модели доступны просто по названию. Поля перечисляются через запятую. Примеры полей: * firstName - имя пользователя * login - логин пользователя * location.city - город пользователя * properties.myprops - значения свойства с ключем myprops * communications.phone - номера телефонов пользователя 
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{output=none}]
     
     - parameter itemId: (path) Идентификатор элемента 
     - parameter fields: (query) Поля выбираемые для импорта из профиля пользователя. Пример корректного значения: &#39;login,communications.phone&#39; Описание см выше. 
     - parameter fieldAliases: (query) Названия полей выбираемые для импорта в понятной человеку форме. Если параметр передан, то проверяется совпадение количества полей с полем fields (optional)

     - returns: RequestBuilder<String> 
     */
    open class func getAnalyticsPushByItemidUnopenedCsvWithRequestBuilder(itemId: String, fields: String, fieldAliases: String? = nil) -> RequestBuilder<String> {
        var path = "/analytics/push/{itemId}/unopened/csv/"
        path = path.replacingOccurrences(of: "{itemId}", with: "\(itemId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "fields": fields, 
            "fieldAliases": fieldAliases
        ])
        

        let requestBuilder: RequestBuilder<String>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
