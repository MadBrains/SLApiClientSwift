//
// FileAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class FileAPI {
    /**
     Запросить список файлов
     
     - parameter limit: (query) Размер выборки (optional, default to 50)
     - parameter afterUrl: (query) URL файла после которого выбираются элементы (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFilesList(limit: Int64? = nil, afterUrl: String? = nil, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getFilesListWithRequestBuilder(limit: limit, afterUrl: afterUrl).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Запросить список файлов
     - GET /files/list/
     - Запрос списка всех файлов, хранящихся на сервере
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     
     - parameter limit: (query) Размер выборки (optional, default to 50)
     - parameter afterUrl: (query) URL файла после которого выбираются элементы (optional)

     - returns: RequestBuilder<[String]> 
     */
    open class func getFilesListWithRequestBuilder(limit: Int64? = nil, afterUrl: String? = nil) -> RequestBuilder<[String]> {
        let path = "/files/list/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "limit": limit?.encodeToJSON(), 
            "afterUrl": afterUrl
        ])
        

        let requestBuilder: RequestBuilder<[String]>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Удалить файл
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postFilesDelete(body: FileDeleteRequest, completion: @escaping ((_ error: Error?) -> Void)) {
        postFilesDeleteWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Удалить файл
     - POST /files/delete/
     - Удаление файла с сервера
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func postFilesDeleteWithRequestBuilder(body: FileDeleteRequest) -> RequestBuilder<Void> {
        let path = "/files/delete/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Загрузить файл
     
     - parameter file: (form) Загружаемый файл (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postFilesUpload(file: URL? = nil, completion: @escaping ((_ data: FileUploadResponse?,_ error: Error?) -> Void)) {
        postFilesUploadWithRequestBuilder(file: file).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Загрузить файл
     - POST /files/upload/
     - Загрузка файла на сервер
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "fileUrl" : "fileUrl"
}}]
     
     - parameter file: (form) Загружаемый файл (optional)

     - returns: RequestBuilder<FileUploadResponse> 
     */
    open class func postFilesUploadWithRequestBuilder(file: URL? = nil) -> RequestBuilder<FileUploadResponse> {
        let path = "/files/upload/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<FileUploadResponse>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Загрузить файл пользователя
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter file: (form) Загружаемый файл (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postFilesUploadUserByUserid(userId: String, file: URL? = nil, completion: @escaping ((_ data: FileUploadResponse?,_ error: Error?) -> Void)) {
        postFilesUploadUserByUseridWithRequestBuilder(userId: userId, file: file).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Загрузить файл пользователя
     - POST /files/upload/user/{userId}/
     - Загрузка файла в конкретную папку пользователя по ID
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "fileUrl" : "fileUrl"
}}]
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter file: (form) Загружаемый файл (optional)

     - returns: RequestBuilder<FileUploadResponse> 
     */
    open class func postFilesUploadUserByUseridWithRequestBuilder(userId: String, file: URL? = nil) -> RequestBuilder<FileUploadResponse> {
        var path = "/files/upload/user/{userId}/"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<FileUploadResponse>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
