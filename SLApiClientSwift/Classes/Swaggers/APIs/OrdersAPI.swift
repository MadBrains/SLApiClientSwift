//
// OrdersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class OrdersAPI {
    /**
     Удаление свойства
     
     - parameter propertyKey: (path) Идентификатор свойства элемента 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDynamicOrderPropertiesByPropertykey(propertyKey: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteDynamicOrderPropertiesByPropertykeyWithRequestBuilder(propertyKey: propertyKey).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Удаление свойства
     - DELETE /dynamic/order/properties/{propertyKey}/
     - Удаление свойства товара из системы по идентификатору товара
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     
     - parameter propertyKey: (path) Идентификатор свойства элемента 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteDynamicOrderPropertiesByPropertykeyWithRequestBuilder(propertyKey: String) -> RequestBuilder<Void> {
        var path = "/dynamic/order/properties/{propertyKey}/"
        path = path.replacingOccurrences(of: "{propertyKey}", with: "\(propertyKey)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Запрос списка свойств
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDynamicOrderProperties(completion: @escaping ((_ data: [IProperty]?,_ error: Error?) -> Void)) {
        getDynamicOrderPropertiesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Запрос списка свойств
     - GET /dynamic/order/properties/
     - Запрос списка свойств товара
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=[ {
  "view" : "vNone",
  "import" : true,
  "extra" : "{}",
  "name" : "name",
  "type" : "ipString",
  "key" : "key"
}, {
  "view" : "vNone",
  "import" : true,
  "extra" : "{}",
  "name" : "name",
  "type" : "ipString",
  "key" : "key"
} ]}]

     - returns: RequestBuilder<[IProperty]> 
     */
    open class func getDynamicOrderPropertiesWithRequestBuilder() -> RequestBuilder<[IProperty]> {
        let path = "/dynamic/order/properties/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[IProperty]>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Запрос свойства
     
     - parameter propertyKey: (path) Идентификатор свойства элемента 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDynamicOrderPropertiesByPropertykey(propertyKey: String, completion: @escaping ((_ data: IProperty?,_ error: Error?) -> Void)) {
        getDynamicOrderPropertiesByPropertykeyWithRequestBuilder(propertyKey: propertyKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Запрос свойства
     - GET /dynamic/order/properties/{propertyKey}/
     - Запрос свойства определенного товара по идентификатору
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "view" : "vNone",
  "import" : true,
  "extra" : "{}",
  "name" : "name",
  "type" : "ipString",
  "key" : "key"
}}]
     
     - parameter propertyKey: (path) Идентификатор свойства элемента 

     - returns: RequestBuilder<IProperty> 
     */
    open class func getDynamicOrderPropertiesByPropertykeyWithRequestBuilder(propertyKey: String) -> RequestBuilder<IProperty> {
        var path = "/dynamic/order/properties/{propertyKey}/"
        path = path.replacingOccurrences(of: "{propertyKey}", with: "\(propertyKey)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<IProperty>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Запрос списка заказов пользователя
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDynamicOrderuserByUserid(userId: String, completion: @escaping ((_ data: [OrderWithRelations]?,_ error: Error?) -> Void)) {
        getDynamicOrderuserByUseridWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Запрос списка заказов пользователя
     - GET /dynamic/orderUser/{userId}/
     - Вывод всего списка заказов пользователя
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     
     - parameter userId: (path) Идентификатор пользователя 

     - returns: RequestBuilder<[OrderWithRelations]> 
     */
    open class func getDynamicOrderuserByUseridWithRequestBuilder(userId: String) -> RequestBuilder<[OrderWithRelations]> {
        var path = "/dynamic/orderUser/{userId}/"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[OrderWithRelations]>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Запрос информации о заказе
     
     - parameter orderId: (path) Идентификатор заказа 
     - parameter userId: (path) Идентификатор пользователя 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDynamicOrderuserByUseridByOrderid(orderId: String, userId: String, completion: @escaping ((_ data: OrderWithRelations?,_ error: Error?) -> Void)) {
        getDynamicOrderuserByUseridByOrderidWithRequestBuilder(orderId: orderId, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Запрос информации о заказе
     - GET /dynamic/orderUser/{userId}/{orderId}/
     - Запрос информации о заказе пользователя
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter orderId: (path) Идентификатор заказа 
     - parameter userId: (path) Идентификатор пользователя 

     - returns: RequestBuilder<OrderWithRelations> 
     */
    open class func getDynamicOrderuserByUseridByOrderidWithRequestBuilder(orderId: String, userId: String) -> RequestBuilder<OrderWithRelations> {
        var path = "/dynamic/orderUser/{userId}/{orderId}/"
        path = path.replacingOccurrences(of: "{orderId}", with: "\(orderId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderWithRelations>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Запрос заказов по фильтру
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDynamicOrderExport(body: OrderExport, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        postDynamicOrderExportWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Запрос заказов по фильтру
     - POST /dynamic/order/export/
     - Выгрузка заказов по фильтру
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{output=none}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<URL> 
     */
    open class func postDynamicOrderExportWithRequestBuilder(body: OrderExport) -> RequestBuilder<URL> {
        let path = "/dynamic/order/export/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<URL>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Поиск (QueryDSL) с агрегацией собираемых данных
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDynamicOrderRequest(body: SearchRequest, completion: @escaping ((_ data: OrderResponse?,_ error: Error?) -> Void)) {
        postDynamicOrderRequestWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Поиск (QueryDSL) с агрегацией собираемых данных
     - POST /dynamic/order/request/
     - Поиск (QueryDSL) с агрегацией собираемых данных
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "count" : 0,
  "aggregations" : "{}",
  "results" : [ "", "" ]
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<OrderResponse> 
     */
    open class func postDynamicOrderRequestWithRequestBuilder(body: SearchRequest) -> RequestBuilder<OrderResponse> {
        let path = "/dynamic/order/request/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderResponse>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Обновление статусов заказов
     
     - parameter body: (body) Массив обновляемых заказов 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDynamicOrderStatus(body: [OrderStatus], completion: @escaping ((_ error: Error?) -> Void)) {
        postDynamicOrderStatusWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Обновление статусов заказов
     - POST /dynamic/order/status/
     - Обновление статусов заказов пользователя
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     
     - parameter body: (body) Массив обновляемых заказов 

     - returns: RequestBuilder<Void> 
     */
    open class func postDynamicOrderStatusWithRequestBuilder(body: [OrderStatus]) -> RequestBuilder<Void> {
        let path = "/dynamic/order/status/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Создание нового заказа
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDynamicOrderuserByUserid(userId: String, body: OrderWithRelations, completion: @escaping ((_ data: OrderWithRelations?,_ error: Error?) -> Void)) {
        postDynamicOrderuserByUseridWithRequestBuilder(userId: userId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Создание нового заказа
     - POST /dynamic/orderUser/{userId}/
     - Добавление нового заказа в корзину пользователя. Используется только для модераторов и сервисных пользователей
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter body: (body)  

     - returns: RequestBuilder<OrderWithRelations> 
     */
    open class func postDynamicOrderuserByUseridWithRequestBuilder(userId: String, body: OrderWithRelations) -> RequestBuilder<OrderWithRelations> {
        var path = "/dynamic/orderUser/{userId}/"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderWithRelations>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Обновление информации о заказе
     
     - parameter orderId: (path) Идентификатор заказа 
     - parameter userId: (path) Идентификатор пользователя 
     - parameter body: (body) Объект обновляемого заказа 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDynamicOrderuserByUseridByOrderid(orderId: String, userId: String, body: OrderWithRelations, completion: @escaping ((_ data: OrderWithRelations?,_ error: Error?) -> Void)) {
        postDynamicOrderuserByUseridByOrderidWithRequestBuilder(orderId: orderId, userId: userId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Обновление информации о заказе
     - POST /dynamic/orderUser/{userId}/{orderId}/
     - **Для использования в клиенте.** Обновление информации о заказе. Генерирует событие \"orders.status_changed\" при успешном обновлении статуса. Поле \"items\" разрешено менять для заказов в статусе \"cart\" (товары **перезаписываются**, а НЕ обновляются). Разрешенные смены статусов   * c \"cart\" на \"create\" или \"cancelled\"   * с \"create\" на \"cancelled\"   * с \"confirmed\" на \"cancelled\" 
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter orderId: (path) Идентификатор заказа 
     - parameter userId: (path) Идентификатор пользователя 
     - parameter body: (body) Объект обновляемого заказа 

     - returns: RequestBuilder<OrderWithRelations> 
     */
    open class func postDynamicOrderuserByUseridByOrderidWithRequestBuilder(orderId: String, userId: String, body: OrderWithRelations) -> RequestBuilder<OrderWithRelations> {
        var path = "/dynamic/orderUser/{userId}/{orderId}/"
        path = path.replacingOccurrences(of: "{orderId}", with: "\(orderId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderWithRelations>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Поиск (QueryDSL) с агрегацией собираемых данных по пользовательским заказам
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDynamicOrderuserByUseridRequest(userId: String, body: SearchRequest, completion: @escaping ((_ data: OrderResponse?,_ error: Error?) -> Void)) {
        postDynamicOrderuserByUseridRequestWithRequestBuilder(userId: userId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Поиск (QueryDSL) с агрегацией собираемых данных по пользовательским заказам
     - POST /dynamic/orderUser/{userId}/request/
     - Поиск (QueryDSL) с агрегацией собираемых данных по пользовательским заказам
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "count" : 0,
  "aggregations" : "{}",
  "results" : [ "", "" ]
}}]
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter body: (body)  

     - returns: RequestBuilder<OrderResponse> 
     */
    open class func postDynamicOrderuserByUseridRequestWithRequestBuilder(userId: String, body: SearchRequest) -> RequestBuilder<OrderResponse> {
        var path = "/dynamic/orderUser/{userId}/request/"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderResponse>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
