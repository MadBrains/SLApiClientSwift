//
// OrdersV2AdminAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class OrdersV2AdminAPI {
    /**
     Список заказов для админки
     
     - parameter limit: (query) Количество заказов 
     - parameter offset: (query) Смещение относительно первого 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getV2OrdersAdmin(limit: Int, offset: Int, completion: @escaping ((_ data: OrderV2List?,_ error: Error?) -> Void)) {
        getV2OrdersAdminWithRequestBuilder(limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Список заказов для админки
     - GET /v2/orders/admin/
     - Список заказов для админки
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "pagination" : {
    "total" : 0,
    "pages" : 0,
    "offset" : 0,
    "limit" : 0
  },
  "orders" : [ {
    "customersData" : "{}",
    "number" : "number",
    "creationTime" : "2000-01-23T04:56:07.000+00:00",
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : {
      "name" : "name",
      "key" : "key"
    }
  }, {
    "customersData" : "{}",
    "number" : "number",
    "creationTime" : "2000-01-23T04:56:07.000+00:00",
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : {
      "name" : "name",
      "key" : "key"
    }
  } ]
}}]
     
     - parameter limit: (query) Количество заказов 
     - parameter offset: (query) Смещение относительно первого 

     - returns: RequestBuilder<OrderV2List> 
     */
    open class func getV2OrdersAdminWithRequestBuilder(limit: Int, offset: Int) -> RequestBuilder<OrderV2List> {
        let path = "/v2/orders/admin/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "limit": limit.encodeToJSON(), 
            "offset": offset.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<OrderV2List>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение заказа по ID
     
     - parameter orderId: (path) Идентификатор заказа 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getV2OrdersAdminByOrderid(orderId: String, completion: @escaping ((_ data: OrderV2?,_ error: Error?) -> Void)) {
        getV2OrdersAdminByOrderidWithRequestBuilder(orderId: orderId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Получение заказа по ID
     - GET /v2/orders/admin/{orderId}/
     - Получение заказа по ID
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter orderId: (path) Идентификатор заказа 

     - returns: RequestBuilder<OrderV2> 
     */
    open class func getV2OrdersAdminByOrderidWithRequestBuilder(orderId: String) -> RequestBuilder<OrderV2> {
        var path = "/v2/orders/admin/{orderId}/"
        path = path.replacingOccurrences(of: "{orderId}", with: "\(orderId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderV2>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получить корзину по инетификатору пользователя
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getV2OrdersAdminCartByUserid(userId: String, completion: @escaping ((_ data: Cart?,_ error: Error?) -> Void)) {
        getV2OrdersAdminCartByUseridWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Получить корзину по инетификатору пользователя
     - GET /v2/orders/admin/cart/{userId}/
     - Получить корзину по инетификатору пользователя
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "customersData" : "{}",
  "delivery" : {
    "data" : "{}",
    "price" : 0.602745618307040320615897144307382404804229736328125,
    "discountPrice" : 0.080082819046101150206595775671303272247314453125,
    "name" : "name",
    "type" : "type"
  },
  "appliedStages" : [ { }, { } ],
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "cartId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "loyalty" : {
    "data" : "{}",
    "bonuses" : 0.7061401241503109105224211816675961017608642578125
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "version" : 1,
  "uid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "price" : {
    "delivery" : 0.2027123023002321833274663731572218239307403564453125,
    "total" : 0.7386281948385884366103937281877733767032623291015625,
    "bonus" : 0.93014442439325761835533512567053548991680145263671875,
    "subtotal" : 0.4145608029883935952142337555414997041225433349609375,
    "cart" : 0.361607674925191080461672754609026014804840087890625
  },
  "canOrderTill" : "2000-01-23T04:56:07.000+00:00",
  "isCustomersDataValid" : true,
  "necessaryStages" : [ null, null ],
  "orderingStatus" : "none",
  "items" : {
    "goods" : [ "", "" ],
    "gifts" : [ {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }
}}]
     
     - parameter userId: (path) Идентификатор пользователя 

     - returns: RequestBuilder<Cart> 
     */
    open class func getV2OrdersAdminCartByUseridWithRequestBuilder(userId: String) -> RequestBuilder<Cart> {
        var path = "/v2/orders/admin/cart/{userId}/"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Cart>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Обновление заказа
     
     - parameter orderId: (path) Идентификатор заказа 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchV2OrdersAdminByOrderid(orderId: String, body: OrderV2Patch, completion: @escaping ((_ data: OrderV2?,_ error: Error?) -> Void)) {
        patchV2OrdersAdminByOrderidWithRequestBuilder(orderId: orderId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Обновление заказа
     - PATCH /v2/orders/admin/{orderId}/
     - Обновление заказа
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter orderId: (path) Идентификатор заказа 
     - parameter body: (body)  

     - returns: RequestBuilder<OrderV2> 
     */
    open class func patchV2OrdersAdminByOrderidWithRequestBuilder(orderId: String, body: OrderV2Patch) -> RequestBuilder<OrderV2> {
        var path = "/v2/orders/admin/{orderId}/"
        path = path.replacingOccurrences(of: "{orderId}", with: "\(orderId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderV2>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Обновление корзины заказов пользователя
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter body: (body)  
     - parameter xContentSignature: (header) Подпись содержимого запроса модификации корзины 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchV2OrdersAdminCartByUserid(userId: String, body: CartPatch, xContentSignature: String, completion: @escaping ((_ data: Cart?,_ error: Error?) -> Void)) {
        patchV2OrdersAdminCartByUseridWithRequestBuilder(userId: userId, body: body, xContentSignature: xContentSignature).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Обновление корзины заказов пользователя
     - PATCH /v2/orders/admin/cart/{userId}/
     - Обновление корзины заказов. См. https://gitlab.itnap.ru/shop-loyalty/orders-v2/wikis/orders/cart#workflow-%D0%BA%D0%BE%D1%80%D0%B7%D0%B8%D0%BD%D1%8B 
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "customersData" : "{}",
  "delivery" : {
    "data" : "{}",
    "price" : 0.602745618307040320615897144307382404804229736328125,
    "discountPrice" : 0.080082819046101150206595775671303272247314453125,
    "name" : "name",
    "type" : "type"
  },
  "appliedStages" : [ { }, { } ],
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "cartId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "loyalty" : {
    "data" : "{}",
    "bonuses" : 0.7061401241503109105224211816675961017608642578125
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "version" : 1,
  "uid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "price" : {
    "delivery" : 0.2027123023002321833274663731572218239307403564453125,
    "total" : 0.7386281948385884366103937281877733767032623291015625,
    "bonus" : 0.93014442439325761835533512567053548991680145263671875,
    "subtotal" : 0.4145608029883935952142337555414997041225433349609375,
    "cart" : 0.361607674925191080461672754609026014804840087890625
  },
  "canOrderTill" : "2000-01-23T04:56:07.000+00:00",
  "isCustomersDataValid" : true,
  "necessaryStages" : [ null, null ],
  "orderingStatus" : "none",
  "items" : {
    "goods" : [ "", "" ],
    "gifts" : [ {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }
}}]
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter body: (body)  
     - parameter xContentSignature: (header) Подпись содержимого запроса модификации корзины 

     - returns: RequestBuilder<Cart> 
     */
    open class func patchV2OrdersAdminCartByUseridWithRequestBuilder(userId: String, body: CartPatch, xContentSignature: String) -> RequestBuilder<Cart> {
        var path = "/v2/orders/admin/cart/{userId}/"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "x-content-signature": xContentSignature
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Cart>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Изменение статуса заказа
     
     - parameter orderId: (path) Идентификатор заказа 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postV2OrdersAdminByOrderidStatus(orderId: String, body: Body1, completion: @escaping ((_ data: OrderV2?,_ error: Error?) -> Void)) {
        postV2OrdersAdminByOrderidStatusWithRequestBuilder(orderId: orderId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Изменение статуса заказа
     - POST /v2/orders/admin/{orderId}/status/
     - Изменение статуса заказа
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter orderId: (path) Идентификатор заказа 
     - parameter body: (body)  

     - returns: RequestBuilder<OrderV2> 
     */
    open class func postV2OrdersAdminByOrderidStatusWithRequestBuilder(orderId: String, body: Body1) -> RequestBuilder<OrderV2> {
        var path = "/v2/orders/admin/{orderId}/status/"
        path = path.replacingOccurrences(of: "{orderId}", with: "\(orderId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderV2>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Поиск заказов в админке
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postV2OrdersAdminRequest(body: SearchRequest, completion: @escaping ((_ data: OrdersV2QueryDslResult?,_ error: Error?) -> Void)) {
        postV2OrdersAdminRequestWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Поиск заказов в админке
     - POST /v2/orders/admin/request/
     - Поиск заказов в админке
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "count" : 0,
  "aggregations" : "{}",
  "results" : [ {
    "customersData" : "{}",
    "number" : "number",
    "creationTime" : "2000-01-23T04:56:07.000+00:00",
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : {
      "name" : "name",
      "key" : "key"
    }
  }, {
    "customersData" : "{}",
    "number" : "number",
    "creationTime" : "2000-01-23T04:56:07.000+00:00",
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : {
      "name" : "name",
      "key" : "key"
    }
  } ]
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<OrdersV2QueryDslResult> 
     */
    open class func postV2OrdersAdminRequestWithRequestBuilder(body: SearchRequest) -> RequestBuilder<OrdersV2QueryDslResult> {
        let path = "/v2/orders/admin/request/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrdersV2QueryDslResult>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
