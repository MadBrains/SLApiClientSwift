//
// PaymentsV2API.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class PaymentsV2API {
    /**
     Удаление поля с данными пользователя
     
     - parameter fieldName: (path) Ключ поля с пользовательскими данными 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteV2OrdersMyCartFieldByFieldname(fieldName: String, completion: @escaping ((_ data: Cart?,_ error: Error?) -> Void)) {
        deleteV2OrdersMyCartFieldByFieldnameWithRequestBuilder(fieldName: fieldName).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Удаление поля с данными пользователя
     - DELETE /v2/orders/my/cart/field/{fieldName}/
     - Удаление поля с данными пользователя
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "customersData" : "{}",
  "delivery" : {
    "data" : "{}",
    "price" : 0.602745618307040320615897144307382404804229736328125,
    "discountPrice" : 0.080082819046101150206595775671303272247314453125,
    "name" : "name",
    "type" : "type"
  },
  "appliedStages" : [ { }, { } ],
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "cartId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "loyalty" : {
    "data" : "{}",
    "bonuses" : 0.7061401241503109105224211816675961017608642578125
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "version" : 1,
  "uid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "price" : {
    "delivery" : 0.2027123023002321833274663731572218239307403564453125,
    "total" : 0.7386281948385884366103937281877733767032623291015625,
    "bonus" : 0.93014442439325761835533512567053548991680145263671875,
    "subtotal" : 0.4145608029883935952142337555414997041225433349609375,
    "cart" : 0.361607674925191080461672754609026014804840087890625
  },
  "canOrderTill" : "2000-01-23T04:56:07.000+00:00",
  "isCustomersDataValid" : true,
  "necessaryStages" : [ null, null ],
  "orderingStatus" : "none",
  "items" : {
    "goods" : [ "", "" ],
    "gifts" : [ {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }
}}]
     
     - parameter fieldName: (path) Ключ поля с пользовательскими данными 

     - returns: RequestBuilder<Cart> 
     */
    open class func deleteV2OrdersMyCartFieldByFieldnameWithRequestBuilder(fieldName: String) -> RequestBuilder<Cart> {
        var path = "/v2/orders/my/cart/field/{fieldName}/"
        path = path.replacingOccurrences(of: "{fieldName}", with: "\(fieldName)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Cart>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Удаление всех полей с данными пользователя
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteV2OrdersMyCartFields(completion: @escaping ((_ data: Cart?,_ error: Error?) -> Void)) {
        deleteV2OrdersMyCartFieldsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Удаление всех полей с данными пользователя
     - DELETE /v2/orders/my/cart/fields/
     - Удаление всех полей с данными пользователя
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "customersData" : "{}",
  "delivery" : {
    "data" : "{}",
    "price" : 0.602745618307040320615897144307382404804229736328125,
    "discountPrice" : 0.080082819046101150206595775671303272247314453125,
    "name" : "name",
    "type" : "type"
  },
  "appliedStages" : [ { }, { } ],
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "cartId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "loyalty" : {
    "data" : "{}",
    "bonuses" : 0.7061401241503109105224211816675961017608642578125
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "version" : 1,
  "uid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "price" : {
    "delivery" : 0.2027123023002321833274663731572218239307403564453125,
    "total" : 0.7386281948385884366103937281877733767032623291015625,
    "bonus" : 0.93014442439325761835533512567053548991680145263671875,
    "subtotal" : 0.4145608029883935952142337555414997041225433349609375,
    "cart" : 0.361607674925191080461672754609026014804840087890625
  },
  "canOrderTill" : "2000-01-23T04:56:07.000+00:00",
  "isCustomersDataValid" : true,
  "necessaryStages" : [ null, null ],
  "orderingStatus" : "none",
  "items" : {
    "goods" : [ "", "" ],
    "gifts" : [ {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }
}}]

     - returns: RequestBuilder<Cart> 
     */
    open class func deleteV2OrdersMyCartFieldsWithRequestBuilder() -> RequestBuilder<Cart> {
        let path = "/v2/orders/my/cart/fields/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Cart>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Удаление товара из корзины по ID
     
     - parameter orderItemId: (path) Идентификатор позиции заказа 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteV2OrdersMyCartItemByOrderitemid(orderItemId: String, completion: @escaping ((_ data: Cart?,_ error: Error?) -> Void)) {
        deleteV2OrdersMyCartItemByOrderitemidWithRequestBuilder(orderItemId: orderItemId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Удаление товара из корзины по ID
     - DELETE /v2/orders/my/cart/item/{orderItemId}/
     - Удаление товара из корзины по ID
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "customersData" : "{}",
  "delivery" : {
    "data" : "{}",
    "price" : 0.602745618307040320615897144307382404804229736328125,
    "discountPrice" : 0.080082819046101150206595775671303272247314453125,
    "name" : "name",
    "type" : "type"
  },
  "appliedStages" : [ { }, { } ],
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "cartId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "loyalty" : {
    "data" : "{}",
    "bonuses" : 0.7061401241503109105224211816675961017608642578125
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "version" : 1,
  "uid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "price" : {
    "delivery" : 0.2027123023002321833274663731572218239307403564453125,
    "total" : 0.7386281948385884366103937281877733767032623291015625,
    "bonus" : 0.93014442439325761835533512567053548991680145263671875,
    "subtotal" : 0.4145608029883935952142337555414997041225433349609375,
    "cart" : 0.361607674925191080461672754609026014804840087890625
  },
  "canOrderTill" : "2000-01-23T04:56:07.000+00:00",
  "isCustomersDataValid" : true,
  "necessaryStages" : [ null, null ],
  "orderingStatus" : "none",
  "items" : {
    "goods" : [ "", "" ],
    "gifts" : [ {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }
}}]
     
     - parameter orderItemId: (path) Идентификатор позиции заказа 

     - returns: RequestBuilder<Cart> 
     */
    open class func deleteV2OrdersMyCartItemByOrderitemidWithRequestBuilder(orderItemId: String) -> RequestBuilder<Cart> {
        var path = "/v2/orders/my/cart/item/{orderItemId}/"
        path = path.replacingOccurrences(of: "{orderItemId}", with: "\(orderItemId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Cart>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Удаление модификатора товара в корзине
     
     - parameter orderItemId: (path) Идентификатор позиции заказа 
     - parameter orderExtraId: (path) Идентификатор модификатора позиции заказа 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteV2OrdersMyCartItemByOrderitemidExtraByOrderextraid(orderItemId: String, orderExtraId: String, completion: @escaping ((_ data: Cart?,_ error: Error?) -> Void)) {
        deleteV2OrdersMyCartItemByOrderitemidExtraByOrderextraidWithRequestBuilder(orderItemId: orderItemId, orderExtraId: orderExtraId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Удаление модификатора товара в корзине
     - DELETE /v2/orders/my/cart/item/{orderItemId}/extra/{orderExtraId}/
     - Удаление модификатора товара в корзине
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "customersData" : "{}",
  "delivery" : {
    "data" : "{}",
    "price" : 0.602745618307040320615897144307382404804229736328125,
    "discountPrice" : 0.080082819046101150206595775671303272247314453125,
    "name" : "name",
    "type" : "type"
  },
  "appliedStages" : [ { }, { } ],
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "cartId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "loyalty" : {
    "data" : "{}",
    "bonuses" : 0.7061401241503109105224211816675961017608642578125
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "version" : 1,
  "uid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "price" : {
    "delivery" : 0.2027123023002321833274663731572218239307403564453125,
    "total" : 0.7386281948385884366103937281877733767032623291015625,
    "bonus" : 0.93014442439325761835533512567053548991680145263671875,
    "subtotal" : 0.4145608029883935952142337555414997041225433349609375,
    "cart" : 0.361607674925191080461672754609026014804840087890625
  },
  "canOrderTill" : "2000-01-23T04:56:07.000+00:00",
  "isCustomersDataValid" : true,
  "necessaryStages" : [ null, null ],
  "orderingStatus" : "none",
  "items" : {
    "goods" : [ "", "" ],
    "gifts" : [ {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }
}}]
     
     - parameter orderItemId: (path) Идентификатор позиции заказа 
     - parameter orderExtraId: (path) Идентификатор модификатора позиции заказа 

     - returns: RequestBuilder<Cart> 
     */
    open class func deleteV2OrdersMyCartItemByOrderitemidExtraByOrderextraidWithRequestBuilder(orderItemId: String, orderExtraId: String) -> RequestBuilder<Cart> {
        var path = "/v2/orders/my/cart/item/{orderItemId}/extra/{orderExtraId}/"
        path = path.replacingOccurrences(of: "{orderItemId}", with: "\(orderItemId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{orderExtraId}", with: "\(orderExtraId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Cart>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Удаление товаров из корзины
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteV2OrdersMyCartItems(completion: @escaping ((_ data: Cart?,_ error: Error?) -> Void)) {
        deleteV2OrdersMyCartItemsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Удаление товаров из корзины
     - DELETE /v2/orders/my/cart/items/
     - Удаление товаров из корзины
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "customersData" : "{}",
  "delivery" : {
    "data" : "{}",
    "price" : 0.602745618307040320615897144307382404804229736328125,
    "discountPrice" : 0.080082819046101150206595775671303272247314453125,
    "name" : "name",
    "type" : "type"
  },
  "appliedStages" : [ { }, { } ],
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "cartId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "loyalty" : {
    "data" : "{}",
    "bonuses" : 0.7061401241503109105224211816675961017608642578125
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "version" : 1,
  "uid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "price" : {
    "delivery" : 0.2027123023002321833274663731572218239307403564453125,
    "total" : 0.7386281948385884366103937281877733767032623291015625,
    "bonus" : 0.93014442439325761835533512567053548991680145263671875,
    "subtotal" : 0.4145608029883935952142337555414997041225433349609375,
    "cart" : 0.361607674925191080461672754609026014804840087890625
  },
  "canOrderTill" : "2000-01-23T04:56:07.000+00:00",
  "isCustomersDataValid" : true,
  "necessaryStages" : [ null, null ],
  "orderingStatus" : "none",
  "items" : {
    "goods" : [ "", "" ],
    "gifts" : [ {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }
}}]

     - returns: RequestBuilder<Cart> 
     */
    open class func deleteV2OrdersMyCartItemsWithRequestBuilder() -> RequestBuilder<Cart> {
        let path = "/v2/orders/my/cart/items/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Cart>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Удаление привзяанной карты по ID привзяки
     
     - parameter bindingId: (path) Идентификатор связки 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteV2OrdersPayBindingsByBindingid(bindingId: String, completion: @escaping ((_ data: ErrorModel?,_ error: Error?) -> Void)) {
        deleteV2OrdersPayBindingsByBindingidWithRequestBuilder(bindingId: bindingId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Удаление привзяанной карты по ID привзяки
     - DELETE /v2/orders/pay/bindings/{bindingId}/
     - Удаление привзяанной карты по ID привзяки
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "code" : 140,
  "message" : "{}"
}}]
     
     - parameter bindingId: (path) Идентификатор связки 

     - returns: RequestBuilder<ErrorModel> 
     */
    open class func deleteV2OrdersPayBindingsByBindingidWithRequestBuilder(bindingId: String) -> RequestBuilder<ErrorModel> {
        var path = "/v2/orders/pay/bindings/{bindingId}/"
        path = path.replacingOccurrences(of: "{bindingId}", with: "\(bindingId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ErrorModel>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Список заказов для админки
     
     - parameter limit: (query) Количество заказов 
     - parameter offset: (query) Смещение относительно первого 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getV2OrdersAdmin(limit: Int, offset: Int, completion: @escaping ((_ data: OrderV2List?,_ error: Error?) -> Void)) {
        getV2OrdersAdminWithRequestBuilder(limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Список заказов для админки
     - GET /v2/orders/admin/
     - Список заказов для админки
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "pagination" : {
    "total" : 0,
    "pages" : 0,
    "offset" : 0,
    "limit" : 0
  },
  "orders" : [ {
    "customersData" : "{}",
    "number" : "number",
    "creationTime" : "2000-01-23T04:56:07.000+00:00",
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : {
      "name" : "name",
      "key" : "key"
    }
  }, {
    "customersData" : "{}",
    "number" : "number",
    "creationTime" : "2000-01-23T04:56:07.000+00:00",
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : {
      "name" : "name",
      "key" : "key"
    }
  } ]
}}]
     
     - parameter limit: (query) Количество заказов 
     - parameter offset: (query) Смещение относительно первого 

     - returns: RequestBuilder<OrderV2List> 
     */
    open class func getV2OrdersAdminWithRequestBuilder(limit: Int, offset: Int) -> RequestBuilder<OrderV2List> {
        let path = "/v2/orders/admin/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "limit": limit.encodeToJSON(), 
            "offset": offset.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<OrderV2List>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение заказа по ID
     
     - parameter orderId: (path) Идентификатор заказа 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getV2OrdersAdminByOrderid(orderId: String, completion: @escaping ((_ data: OrderV2?,_ error: Error?) -> Void)) {
        getV2OrdersAdminByOrderidWithRequestBuilder(orderId: orderId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Получение заказа по ID
     - GET /v2/orders/admin/{orderId}/
     - Получение заказа по ID
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter orderId: (path) Идентификатор заказа 

     - returns: RequestBuilder<OrderV2> 
     */
    open class func getV2OrdersAdminByOrderidWithRequestBuilder(orderId: String) -> RequestBuilder<OrderV2> {
        var path = "/v2/orders/admin/{orderId}/"
        path = path.replacingOccurrences(of: "{orderId}", with: "\(orderId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderV2>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получить корзину по инетификатору пользователя
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getV2OrdersAdminCartByUserid(userId: String, completion: @escaping ((_ data: Cart?,_ error: Error?) -> Void)) {
        getV2OrdersAdminCartByUseridWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Получить корзину по инетификатору пользователя
     - GET /v2/orders/admin/cart/{userId}/
     - Получить корзину по инетификатору пользователя
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "customersData" : "{}",
  "delivery" : {
    "data" : "{}",
    "price" : 0.602745618307040320615897144307382404804229736328125,
    "discountPrice" : 0.080082819046101150206595775671303272247314453125,
    "name" : "name",
    "type" : "type"
  },
  "appliedStages" : [ { }, { } ],
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "cartId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "loyalty" : {
    "data" : "{}",
    "bonuses" : 0.7061401241503109105224211816675961017608642578125
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "version" : 1,
  "uid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "price" : {
    "delivery" : 0.2027123023002321833274663731572218239307403564453125,
    "total" : 0.7386281948385884366103937281877733767032623291015625,
    "bonus" : 0.93014442439325761835533512567053548991680145263671875,
    "subtotal" : 0.4145608029883935952142337555414997041225433349609375,
    "cart" : 0.361607674925191080461672754609026014804840087890625
  },
  "canOrderTill" : "2000-01-23T04:56:07.000+00:00",
  "isCustomersDataValid" : true,
  "necessaryStages" : [ null, null ],
  "orderingStatus" : "none",
  "items" : {
    "goods" : [ "", "" ],
    "gifts" : [ {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }
}}]
     
     - parameter userId: (path) Идентификатор пользователя 

     - returns: RequestBuilder<Cart> 
     */
    open class func getV2OrdersAdminCartByUseridWithRequestBuilder(userId: String) -> RequestBuilder<Cart> {
        var path = "/v2/orders/admin/cart/{userId}/"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Cart>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение списка заказов пользователя
     
     - parameter limit: (query)  
     - parameter offset: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getV2OrdersMy(limit: Int, offset: Int, completion: @escaping ((_ data: OrderV2List?,_ error: Error?) -> Void)) {
        getV2OrdersMyWithRequestBuilder(limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Получение списка заказов пользователя
     - GET /v2/orders/my/
     - Получение списка заказов пользователя
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "pagination" : {
    "total" : 0,
    "pages" : 0,
    "offset" : 0,
    "limit" : 0
  },
  "orders" : [ {
    "customersData" : "{}",
    "number" : "number",
    "creationTime" : "2000-01-23T04:56:07.000+00:00",
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : {
      "name" : "name",
      "key" : "key"
    }
  }, {
    "customersData" : "{}",
    "number" : "number",
    "creationTime" : "2000-01-23T04:56:07.000+00:00",
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : {
      "name" : "name",
      "key" : "key"
    }
  } ]
}}]
     
     - parameter limit: (query)  
     - parameter offset: (query)  

     - returns: RequestBuilder<OrderV2List> 
     */
    open class func getV2OrdersMyWithRequestBuilder(limit: Int, offset: Int) -> RequestBuilder<OrderV2List> {
        let path = "/v2/orders/my/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "limit": limit.encodeToJSON(), 
            "offset": offset.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<OrderV2List>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение заказа пользователя по ID
     
     - parameter orderId: (path) Идентификатор заказа 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getV2OrdersMyByOrderid(orderId: String, completion: @escaping ((_ data: OrderV2User?,_ error: Error?) -> Void)) {
        getV2OrdersMyByOrderidWithRequestBuilder(orderId: orderId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Получение заказа пользователя по ID
     - GET /v2/orders/my/{orderId}/
     - Получение заказа пользователя по ID
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "customersData" : "{}",
  "delivery" : {
    "data" : "{}",
    "price" : 0.602745618307040320615897144307382404804229736328125,
    "discountPrice" : 0.080082819046101150206595775671303272247314453125,
    "name" : "name",
    "type" : "type"
  },
  "number" : "number",
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "loyalty" : {
    "data" : "{}",
    "bonuses" : 0.7061401241503109105224211816675961017608642578125
  },
  "payment" : {
    "type" : { },
    "isPayed" : true
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "items" : {
    "goods" : [ "", "" ],
    "gifts" : [ {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  },
  "remoteId" : "remoteId",
  "status" : {
    "name" : "name",
    "key" : "key"
  }
}}]
     
     - parameter orderId: (path) Идентификатор заказа 

     - returns: RequestBuilder<OrderV2User> 
     */
    open class func getV2OrdersMyByOrderidWithRequestBuilder(orderId: String) -> RequestBuilder<OrderV2User> {
        var path = "/v2/orders/my/{orderId}/"
        path = path.replacingOccurrences(of: "{orderId}", with: "\(orderId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderV2User>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение корзины заказов.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getV2OrdersMyCart(completion: @escaping ((_ data: Cart?,_ error: Error?) -> Void)) {
        getV2OrdersMyCartWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Получение корзины заказов.
     - GET /v2/orders/my/cart/
     - Получение корзины заказов. Если ее не существовало до этого  у пользователя, создается новая. 
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "customersData" : "{}",
  "delivery" : {
    "data" : "{}",
    "price" : 0.602745618307040320615897144307382404804229736328125,
    "discountPrice" : 0.080082819046101150206595775671303272247314453125,
    "name" : "name",
    "type" : "type"
  },
  "appliedStages" : [ { }, { } ],
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "cartId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "loyalty" : {
    "data" : "{}",
    "bonuses" : 0.7061401241503109105224211816675961017608642578125
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "version" : 1,
  "uid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "price" : {
    "delivery" : 0.2027123023002321833274663731572218239307403564453125,
    "total" : 0.7386281948385884366103937281877733767032623291015625,
    "bonus" : 0.93014442439325761835533512567053548991680145263671875,
    "subtotal" : 0.4145608029883935952142337555414997041225433349609375,
    "cart" : 0.361607674925191080461672754609026014804840087890625
  },
  "canOrderTill" : "2000-01-23T04:56:07.000+00:00",
  "isCustomersDataValid" : true,
  "necessaryStages" : [ null, null ],
  "orderingStatus" : "none",
  "items" : {
    "goods" : [ "", "" ],
    "gifts" : [ {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }
}}]

     - returns: RequestBuilder<Cart> 
     */
    open class func getV2OrdersMyCartWithRequestBuilder() -> RequestBuilder<Cart> {
        let path = "/v2/orders/my/cart/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Cart>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение списка привзаных карт пользователей
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getV2OrdersPayBindings(completion: @escaping ((_ data: [Any]?,_ error: Error?) -> Void)) {
        getV2OrdersPayBindingsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Получение списка привзаных карт пользователей
     - GET /v2/orders/pay/bindings/
     - Получение списка привзаных карт пользователей
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=[ "{}", "{}" ]}]

     - returns: RequestBuilder<[Any]> 
     */
    open class func getV2OrdersPayBindingsWithRequestBuilder() -> RequestBuilder<[Any]> {
        let path = "/v2/orders/pay/bindings/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Any]>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Обратный вызов Сбребанка для обновления статусов заказа
     
     - parameter mdOrder: (query) Идентификатор платежа в платежном шлюзе 
     - parameter orderNumber: (query) Номер заказа, переданный в платежный шлюз 
     - parameter operation: (query) Операция, проведенная над платежом 
     - parameter status: (query) Статус проведенной операции: 0 - не успешно, 1 - успешно 
     - parameter checksum: (query) Контрольная сумма для проверки подлинности источника данных 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getV2OrdersPayCallback(mdOrder: String, orderNumber: String, operation: Int, status: Int, checksum: String, completion: @escaping ((_ data: ErrorModel?,_ error: Error?) -> Void)) {
        getV2OrdersPayCallbackWithRequestBuilder(mdOrder: mdOrder, orderNumber: orderNumber, operation: operation, status: status, checksum: checksum).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Обратный вызов Сбребанка для обновления статусов заказа
     - GET /v2/orders/pay/callback/
     - Обратный вызов Сбребанка для обновления статусов заказа
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "code" : 140,
  "message" : "{}"
}}]
     
     - parameter mdOrder: (query) Идентификатор платежа в платежном шлюзе 
     - parameter orderNumber: (query) Номер заказа, переданный в платежный шлюз 
     - parameter operation: (query) Операция, проведенная над платежом 
     - parameter status: (query) Статус проведенной операции: 0 - не успешно, 1 - успешно 
     - parameter checksum: (query) Контрольная сумма для проверки подлинности источника данных 

     - returns: RequestBuilder<ErrorModel> 
     */
    open class func getV2OrdersPayCallbackWithRequestBuilder(mdOrder: String, orderNumber: String, operation: Int, status: Int, checksum: String) -> RequestBuilder<ErrorModel> {
        let path = "/v2/orders/pay/callback/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "mdOrder": mdOrder, 
            "orderNumber": orderNumber, 
            "operation": operation.encodeToJSON(), 
            "status": status.encodeToJSON(), 
            "checksum": checksum
        ])
        

        let requestBuilder: RequestBuilder<ErrorModel>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Обновление заказа
     
     - parameter orderId: (path) Идентификатор заказа 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchV2OrdersAdminByOrderid(orderId: String, body: OrderV2Patch, completion: @escaping ((_ data: OrderV2?,_ error: Error?) -> Void)) {
        patchV2OrdersAdminByOrderidWithRequestBuilder(orderId: orderId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Обновление заказа
     - PATCH /v2/orders/admin/{orderId}/
     - Обновление заказа
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter orderId: (path) Идентификатор заказа 
     - parameter body: (body)  

     - returns: RequestBuilder<OrderV2> 
     */
    open class func patchV2OrdersAdminByOrderidWithRequestBuilder(orderId: String, body: OrderV2Patch) -> RequestBuilder<OrderV2> {
        var path = "/v2/orders/admin/{orderId}/"
        path = path.replacingOccurrences(of: "{orderId}", with: "\(orderId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderV2>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Обновление корзины заказов пользователя
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter body: (body)  
     - parameter xContentSignature: (header) Подпись содержимого запроса модификации корзины 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchV2OrdersAdminCartByUserid(userId: String, body: CartPatch, xContentSignature: String, completion: @escaping ((_ data: Cart?,_ error: Error?) -> Void)) {
        patchV2OrdersAdminCartByUseridWithRequestBuilder(userId: userId, body: body, xContentSignature: xContentSignature).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Обновление корзины заказов пользователя
     - PATCH /v2/orders/admin/cart/{userId}/
     - Обновление корзины заказов. См. https://gitlab.itnap.ru/shop-loyalty/orders-v2/wikis/orders/cart#workflow-%D0%BA%D0%BE%D1%80%D0%B7%D0%B8%D0%BD%D1%8B 
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "customersData" : "{}",
  "delivery" : {
    "data" : "{}",
    "price" : 0.602745618307040320615897144307382404804229736328125,
    "discountPrice" : 0.080082819046101150206595775671303272247314453125,
    "name" : "name",
    "type" : "type"
  },
  "appliedStages" : [ { }, { } ],
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "cartId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "loyalty" : {
    "data" : "{}",
    "bonuses" : 0.7061401241503109105224211816675961017608642578125
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "version" : 1,
  "uid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "price" : {
    "delivery" : 0.2027123023002321833274663731572218239307403564453125,
    "total" : 0.7386281948385884366103937281877733767032623291015625,
    "bonus" : 0.93014442439325761835533512567053548991680145263671875,
    "subtotal" : 0.4145608029883935952142337555414997041225433349609375,
    "cart" : 0.361607674925191080461672754609026014804840087890625
  },
  "canOrderTill" : "2000-01-23T04:56:07.000+00:00",
  "isCustomersDataValid" : true,
  "necessaryStages" : [ null, null ],
  "orderingStatus" : "none",
  "items" : {
    "goods" : [ "", "" ],
    "gifts" : [ {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }
}}]
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter body: (body)  
     - parameter xContentSignature: (header) Подпись содержимого запроса модификации корзины 

     - returns: RequestBuilder<Cart> 
     */
    open class func patchV2OrdersAdminCartByUseridWithRequestBuilder(userId: String, body: CartPatch, xContentSignature: String) -> RequestBuilder<Cart> {
        var path = "/v2/orders/admin/cart/{userId}/"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "x-content-signature": xContentSignature
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Cart>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Изменение статуса заказа
     
     - parameter orderId: (path) Идентификатор заказа 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postV2OrdersAdminByOrderidStatus(orderId: String, body: Body1, completion: @escaping ((_ data: OrderV2?,_ error: Error?) -> Void)) {
        postV2OrdersAdminByOrderidStatusWithRequestBuilder(orderId: orderId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Изменение статуса заказа
     - POST /v2/orders/admin/{orderId}/status/
     - Изменение статуса заказа
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter orderId: (path) Идентификатор заказа 
     - parameter body: (body)  

     - returns: RequestBuilder<OrderV2> 
     */
    open class func postV2OrdersAdminByOrderidStatusWithRequestBuilder(orderId: String, body: Body1) -> RequestBuilder<OrderV2> {
        var path = "/v2/orders/admin/{orderId}/status/"
        path = path.replacingOccurrences(of: "{orderId}", with: "\(orderId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderV2>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Поиск заказов в админке
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postV2OrdersAdminRequest(body: SearchRequest, completion: @escaping ((_ data: OrdersV2QueryDslResult?,_ error: Error?) -> Void)) {
        postV2OrdersAdminRequestWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Поиск заказов в админке
     - POST /v2/orders/admin/request/
     - Поиск заказов в админке
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "count" : 0,
  "aggregations" : "{}",
  "results" : [ {
    "customersData" : "{}",
    "number" : "number",
    "creationTime" : "2000-01-23T04:56:07.000+00:00",
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : {
      "name" : "name",
      "key" : "key"
    }
  }, {
    "customersData" : "{}",
    "number" : "number",
    "creationTime" : "2000-01-23T04:56:07.000+00:00",
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : {
      "name" : "name",
      "key" : "key"
    }
  } ]
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<OrdersV2QueryDslResult> 
     */
    open class func postV2OrdersAdminRequestWithRequestBuilder(body: SearchRequest) -> RequestBuilder<OrdersV2QueryDslResult> {
        let path = "/v2/orders/admin/request/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrdersV2QueryDslResult>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Смена статуса заказа пользователем
     
     - parameter orderId: (path) Идентификатор заказа 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postV2OrdersMyByOrderidStatus(orderId: String, body: Body2, completion: @escaping ((_ data: OrderV2User?,_ error: Error?) -> Void)) {
        postV2OrdersMyByOrderidStatusWithRequestBuilder(orderId: orderId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Смена статуса заказа пользователем
     - POST /v2/orders/my/{orderId}/status/
     - Смена статуса заказа пользователем. Возможно изменять только на те статусы,  на которые разрешено менять пользователю. 
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "customersData" : "{}",
  "delivery" : {
    "data" : "{}",
    "price" : 0.602745618307040320615897144307382404804229736328125,
    "discountPrice" : 0.080082819046101150206595775671303272247314453125,
    "name" : "name",
    "type" : "type"
  },
  "number" : "number",
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "loyalty" : {
    "data" : "{}",
    "bonuses" : 0.7061401241503109105224211816675961017608642578125
  },
  "payment" : {
    "type" : { },
    "isPayed" : true
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "items" : {
    "goods" : [ "", "" ],
    "gifts" : [ {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  },
  "remoteId" : "remoteId",
  "status" : {
    "name" : "name",
    "key" : "key"
  }
}}]
     
     - parameter orderId: (path) Идентификатор заказа 
     - parameter body: (body)  

     - returns: RequestBuilder<OrderV2User> 
     */
    open class func postV2OrdersMyByOrderidStatusWithRequestBuilder(orderId: String, body: Body2) -> RequestBuilder<OrderV2User> {
        var path = "/v2/orders/my/{orderId}/status/"
        path = path.replacingOccurrences(of: "{orderId}", with: "\(orderId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderV2User>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Заполнение поля с данными пользователя
     
     - parameter fieldName: (path) Ключ поля с пользовательскими данными 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postV2OrdersMyCartFieldByFieldname(fieldName: String, body: String, completion: @escaping ((_ data: Cart?,_ error: Error?) -> Void)) {
        postV2OrdersMyCartFieldByFieldnameWithRequestBuilder(fieldName: fieldName, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Заполнение поля с данными пользователя
     - POST /v2/orders/my/cart/field/{fieldName}/
     - Заполнение поля с данными пользователя
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "customersData" : "{}",
  "delivery" : {
    "data" : "{}",
    "price" : 0.602745618307040320615897144307382404804229736328125,
    "discountPrice" : 0.080082819046101150206595775671303272247314453125,
    "name" : "name",
    "type" : "type"
  },
  "appliedStages" : [ { }, { } ],
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "cartId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "loyalty" : {
    "data" : "{}",
    "bonuses" : 0.7061401241503109105224211816675961017608642578125
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "version" : 1,
  "uid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "price" : {
    "delivery" : 0.2027123023002321833274663731572218239307403564453125,
    "total" : 0.7386281948385884366103937281877733767032623291015625,
    "bonus" : 0.93014442439325761835533512567053548991680145263671875,
    "subtotal" : 0.4145608029883935952142337555414997041225433349609375,
    "cart" : 0.361607674925191080461672754609026014804840087890625
  },
  "canOrderTill" : "2000-01-23T04:56:07.000+00:00",
  "isCustomersDataValid" : true,
  "necessaryStages" : [ null, null ],
  "orderingStatus" : "none",
  "items" : {
    "goods" : [ "", "" ],
    "gifts" : [ {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }
}}]
     
     - parameter fieldName: (path) Ключ поля с пользовательскими данными 
     - parameter body: (body)  

     - returns: RequestBuilder<Cart> 
     */
    open class func postV2OrdersMyCartFieldByFieldnameWithRequestBuilder(fieldName: String, body: String) -> RequestBuilder<Cart> {
        var path = "/v2/orders/my/cart/field/{fieldName}/"
        path = path.replacingOccurrences(of: "{fieldName}", with: "\(fieldName)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Cart>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Заполнение нескольких полей с данными пользователя
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postV2OrdersMyCartFields(body: Any, completion: @escaping ((_ data: Cart?,_ error: Error?) -> Void)) {
        postV2OrdersMyCartFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Заполнение нескольких полей с данными пользователя
     - POST /v2/orders/my/cart/fields/
     - Заполнение нескольких полей с данными пользователя
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "customersData" : "{}",
  "delivery" : {
    "data" : "{}",
    "price" : 0.602745618307040320615897144307382404804229736328125,
    "discountPrice" : 0.080082819046101150206595775671303272247314453125,
    "name" : "name",
    "type" : "type"
  },
  "appliedStages" : [ { }, { } ],
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "cartId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "loyalty" : {
    "data" : "{}",
    "bonuses" : 0.7061401241503109105224211816675961017608642578125
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "version" : 1,
  "uid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "price" : {
    "delivery" : 0.2027123023002321833274663731572218239307403564453125,
    "total" : 0.7386281948385884366103937281877733767032623291015625,
    "bonus" : 0.93014442439325761835533512567053548991680145263671875,
    "subtotal" : 0.4145608029883935952142337555414997041225433349609375,
    "cart" : 0.361607674925191080461672754609026014804840087890625
  },
  "canOrderTill" : "2000-01-23T04:56:07.000+00:00",
  "isCustomersDataValid" : true,
  "necessaryStages" : [ null, null ],
  "orderingStatus" : "none",
  "items" : {
    "goods" : [ "", "" ],
    "gifts" : [ {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Cart> 
     */
    open class func postV2OrdersMyCartFieldsWithRequestBuilder(body: Any) -> RequestBuilder<Cart> {
        let path = "/v2/orders/my/cart/fields/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Cart>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Обновление товара в корзине
     
     - parameter orderItemId: (path) Идентификатор позиции заказа 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postV2OrdersMyCartItemByOrderitemid(orderItemId: String, body: CartItem, completion: @escaping ((_ data: Cart?,_ error: Error?) -> Void)) {
        postV2OrdersMyCartItemByOrderitemidWithRequestBuilder(orderItemId: orderItemId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Обновление товара в корзине
     - POST /v2/orders/my/cart/item/{orderItemId}/
     - Обновление товара в корзине
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "customersData" : "{}",
  "delivery" : {
    "data" : "{}",
    "price" : 0.602745618307040320615897144307382404804229736328125,
    "discountPrice" : 0.080082819046101150206595775671303272247314453125,
    "name" : "name",
    "type" : "type"
  },
  "appliedStages" : [ { }, { } ],
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "cartId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "loyalty" : {
    "data" : "{}",
    "bonuses" : 0.7061401241503109105224211816675961017608642578125
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "version" : 1,
  "uid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "price" : {
    "delivery" : 0.2027123023002321833274663731572218239307403564453125,
    "total" : 0.7386281948385884366103937281877733767032623291015625,
    "bonus" : 0.93014442439325761835533512567053548991680145263671875,
    "subtotal" : 0.4145608029883935952142337555414997041225433349609375,
    "cart" : 0.361607674925191080461672754609026014804840087890625
  },
  "canOrderTill" : "2000-01-23T04:56:07.000+00:00",
  "isCustomersDataValid" : true,
  "necessaryStages" : [ null, null ],
  "orderingStatus" : "none",
  "items" : {
    "goods" : [ "", "" ],
    "gifts" : [ {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }
}}]
     
     - parameter orderItemId: (path) Идентификатор позиции заказа 
     - parameter body: (body)  

     - returns: RequestBuilder<Cart> 
     */
    open class func postV2OrdersMyCartItemByOrderitemidWithRequestBuilder(orderItemId: String, body: CartItem) -> RequestBuilder<Cart> {
        var path = "/v2/orders/my/cart/item/{orderItemId}/"
        path = path.replacingOccurrences(of: "{orderItemId}", with: "\(orderItemId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Cart>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Поиск заказов пользователя
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postV2OrdersMyRequest(body: SearchRequest, completion: @escaping ((_ data: OrdersV2QueryDslResult?,_ error: Error?) -> Void)) {
        postV2OrdersMyRequestWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Поиск заказов пользователя
     - POST /v2/orders/my/request/
     - Поиск заказов пользователя
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "count" : 0,
  "aggregations" : "{}",
  "results" : [ {
    "customersData" : "{}",
    "number" : "number",
    "creationTime" : "2000-01-23T04:56:07.000+00:00",
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : {
      "name" : "name",
      "key" : "key"
    }
  }, {
    "customersData" : "{}",
    "number" : "number",
    "creationTime" : "2000-01-23T04:56:07.000+00:00",
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : {
      "name" : "name",
      "key" : "key"
    }
  } ]
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<OrdersV2QueryDslResult> 
     */
    open class func postV2OrdersMyRequestWithRequestBuilder(body: SearchRequest) -> RequestBuilder<OrdersV2QueryDslResult> {
        let path = "/v2/orders/my/request/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrdersV2QueryDslResult>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Заказ с использованием платежной системы Apple Pay
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postV2OrdersOrderApplePay(body: PaymentRegisterRequestV2, completion: @escaping ((_ data: OrderV2?,_ error: Error?) -> Void)) {
        postV2OrdersOrderApplePayWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Заказ с использованием платежной системы Apple Pay
     - POST /v2/orders/order/apple-pay/
     - Заказ с использованием платежной системы Apple Pay
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<OrderV2> 
     */
    open class func postV2OrdersOrderApplePayWithRequestBuilder(body: PaymentRegisterRequestV2) -> RequestBuilder<OrderV2> {
        let path = "/v2/orders/order/apple-pay/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderV2>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     * enum for parameter paymentType
     */
    public enum PaymentType_postV2OrdersOrderByPaymenttype: String { 
        case cash = "cash"
        case cardOnDelivery = "card-on-delivery"
    }

    /**
     Заказ с использование оффлайн-оплаты
     
     - parameter paymentType: (path) Тип оплаты 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postV2OrdersOrderByPaymenttype(paymentType: PaymentType_postV2OrdersOrderByPaymenttype, completion: @escaping ((_ data: OrderV2?,_ error: Error?) -> Void)) {
        postV2OrdersOrderByPaymenttypeWithRequestBuilder(paymentType: paymentType).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Заказ с использование оффлайн-оплаты
     - POST /v2/orders/order/{paymentType}/
     - Заказ с использование оффлайн-оплаты: наличными или картой при доставке
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter paymentType: (path) Тип оплаты 

     - returns: RequestBuilder<OrderV2> 
     */
    open class func postV2OrdersOrderByPaymenttypeWithRequestBuilder(paymentType: PaymentType_postV2OrdersOrderByPaymenttype) -> RequestBuilder<OrderV2> {
        var path = "/v2/orders/order/{paymentType}/"
        path = path.replacingOccurrences(of: "{paymentType}", with: "\(paymentType.rawValue)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderV2>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Заказ с оплатой картой онлайн
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postV2OrdersOrderCard(body: CardRegisterRequestV2, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        postV2OrdersOrderCardWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Заказ с оплатой картой онлайн
     - POST /v2/orders/order/card/
     - Заказ с оплатой картой онлайн
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "formUrl" : "formUrl",
  "order" : ""
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func postV2OrdersOrderCardWithRequestBuilder(body: CardRegisterRequestV2) -> RequestBuilder<InlineResponse2001> {
        let path = "/v2/orders/order/card/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Заказ с использованием платежной системы Google Pay
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postV2OrdersOrderGooglePay(body: GooglePayRegisterRequestV2, completion: @escaping ((_ data: OrderV2?,_ error: Error?) -> Void)) {
        postV2OrdersOrderGooglePayWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Заказ с использованием платежной системы Google Pay
     - POST /v2/orders/order/google-pay/
     - Заказ с использованием платежной системы Google Pay
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<OrderV2> 
     */
    open class func postV2OrdersOrderGooglePayWithRequestBuilder(body: GooglePayRegisterRequestV2) -> RequestBuilder<OrderV2> {
        let path = "/v2/orders/order/google-pay/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderV2>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Заказ с использованием платежной системы Samsung Pay
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postV2OrdersOrderSamsungPay(body: PaymentRegisterRequestV2, completion: @escaping ((_ data: OrderV2?,_ error: Error?) -> Void)) {
        postV2OrdersOrderSamsungPayWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Заказ с использованием платежной системы Samsung Pay
     - POST /v2/orders/order/samsung-pay/
     - Заказ с использованием платежной системы Samsung Pay
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<OrderV2> 
     */
    open class func postV2OrdersOrderSamsungPayWithRequestBuilder(body: PaymentRegisterRequestV2) -> RequestBuilder<OrderV2> {
        let path = "/v2/orders/order/samsung-pay/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<OrderV2>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Добавление модификатора товара в корзине
     
     - parameter orderItemId: (path) Идентификатор позиции заказа 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putV2OrdersMyCartItemByOrderitemidExtras(orderItemId: String, body: CartItem, completion: @escaping ((_ data: Cart?,_ error: Error?) -> Void)) {
        putV2OrdersMyCartItemByOrderitemidExtrasWithRequestBuilder(orderItemId: orderItemId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Добавление модификатора товара в корзине
     - PUT /v2/orders/my/cart/item/{orderItemId}/extras/
     - Добавление модификатора товара в корзине
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "customersData" : "{}",
  "delivery" : {
    "data" : "{}",
    "price" : 0.602745618307040320615897144307382404804229736328125,
    "discountPrice" : 0.080082819046101150206595775671303272247314453125,
    "name" : "name",
    "type" : "type"
  },
  "appliedStages" : [ { }, { } ],
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "cartId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "loyalty" : {
    "data" : "{}",
    "bonuses" : 0.7061401241503109105224211816675961017608642578125
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "version" : 1,
  "uid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "price" : {
    "delivery" : 0.2027123023002321833274663731572218239307403564453125,
    "total" : 0.7386281948385884366103937281877733767032623291015625,
    "bonus" : 0.93014442439325761835533512567053548991680145263671875,
    "subtotal" : 0.4145608029883935952142337555414997041225433349609375,
    "cart" : 0.361607674925191080461672754609026014804840087890625
  },
  "canOrderTill" : "2000-01-23T04:56:07.000+00:00",
  "isCustomersDataValid" : true,
  "necessaryStages" : [ null, null ],
  "orderingStatus" : "none",
  "items" : {
    "goods" : [ "", "" ],
    "gifts" : [ {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }
}}]
     
     - parameter orderItemId: (path) Идентификатор позиции заказа 
     - parameter body: (body)  

     - returns: RequestBuilder<Cart> 
     */
    open class func putV2OrdersMyCartItemByOrderitemidExtrasWithRequestBuilder(orderItemId: String, body: CartItem) -> RequestBuilder<Cart> {
        var path = "/v2/orders/my/cart/item/{orderItemId}/extras/"
        path = path.replacingOccurrences(of: "{orderItemId}", with: "\(orderItemId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Cart>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Добавление товара в корзину
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putV2OrdersMyCartItems(body: CartItem, completion: @escaping ((_ data: Cart?,_ error: Error?) -> Void)) {
        putV2OrdersMyCartItemsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Добавление товара в корзину
     - PUT /v2/orders/my/cart/items/
     - Добавление товара в корзину
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "customersData" : "{}",
  "delivery" : {
    "data" : "{}",
    "price" : 0.602745618307040320615897144307382404804229736328125,
    "discountPrice" : 0.080082819046101150206595775671303272247314453125,
    "name" : "name",
    "type" : "type"
  },
  "appliedStages" : [ { }, { } ],
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "cartId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "loyalty" : {
    "data" : "{}",
    "bonuses" : 0.7061401241503109105224211816675961017608642578125
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "version" : 1,
  "uid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "price" : {
    "delivery" : 0.2027123023002321833274663731572218239307403564453125,
    "total" : 0.7386281948385884366103937281877733767032623291015625,
    "bonus" : 0.93014442439325761835533512567053548991680145263671875,
    "subtotal" : 0.4145608029883935952142337555414997041225433349609375,
    "cart" : 0.361607674925191080461672754609026014804840087890625
  },
  "canOrderTill" : "2000-01-23T04:56:07.000+00:00",
  "isCustomersDataValid" : true,
  "necessaryStages" : [ null, null ],
  "orderingStatus" : "none",
  "items" : {
    "goods" : [ "", "" ],
    "gifts" : [ {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "catalogItemId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "unit" : "pc",
      "quantity" : 2,
      "data" : {
        "image" : "http://example.com/aeiou",
        "name" : "name",
        "description" : "description",
        "remoteId" : "remoteId"
      },
      "price" : 0.5637376656633328320111786524648778140544891357421875,
      "portion" : 0.59721339166831821643199873506091535091400146484375,
      "discountPrice" : 0.146581298050294517310021547018550336360931396484375,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Cart> 
     */
    open class func putV2OrdersMyCartItemsWithRequestBuilder(body: CartItem) -> RequestBuilder<Cart> {
        let path = "/v2/orders/my/cart/items/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Cart>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
