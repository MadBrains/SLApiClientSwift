//
// StatisticsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class StatisticsAPI {
    /**
     Регистрация события просмотра товара
     
     - parameter event: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putStatisticsEventCatalogItemShow(event: StatisticsEventCatalogItemShow, completion: @escaping ((_ error: Error?) -> Void)) {
        putStatisticsEventCatalogItemShowWithRequestBuilder(event: event).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Регистрация события просмотра товара
     - PUT /statistics/event/catalog/item/show/
     - Регистрация события просмотра товара
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     
     - parameter event: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func putStatisticsEventCatalogItemShowWithRequestBuilder(event: StatisticsEventCatalogItemShow) -> RequestBuilder<Void> {
        let path = "/statistics/event/catalog/item/show/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: event)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Регистрация события смены состава заказа
     
     - parameter event: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putStatisticsEventOrderItems(event: StatisticsEventOrderItems, completion: @escaping ((_ error: Error?) -> Void)) {
        putStatisticsEventOrderItemsWithRequestBuilder(event: event).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Регистрация события смены состава заказа
     - PUT /statistics/event/order/items/
     - Регистрирует событие для статистики изменение состава заказа
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     
     - parameter event: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func putStatisticsEventOrderItemsWithRequestBuilder(event: StatisticsEventOrderItems) -> RequestBuilder<Void> {
        let path = "/statistics/event/order/items/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: event)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Регистрация события смена статуса заказа
     
     - parameter event: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putStatisticsEventOrderStatus(event: StatisticsEventOrderStatus, completion: @escaping ((_ error: Error?) -> Void)) {
        putStatisticsEventOrderStatusWithRequestBuilder(event: event).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Регистрация события смена статуса заказа
     - PUT /statistics/event/order/status/
     - Регистрирует событие для статистики изменение статуса заказа
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     
     - parameter event: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func putStatisticsEventOrderStatusWithRequestBuilder(event: StatisticsEventOrderStatus) -> RequestBuilder<Void> {
        let path = "/statistics/event/order/status/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: event)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Регистрация события открытия push уведомления
     
     - parameter event: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putStatisticsEventPushOpen(event: StatisticsEventCatalogPush, completion: @escaping ((_ error: Error?) -> Void)) {
        putStatisticsEventPushOpenWithRequestBuilder(event: event).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Регистрация события открытия push уведомления
     - PUT /statistics/event/push/open/
     - Регистрация события открытия push уведомления
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     
     - parameter event: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func putStatisticsEventPushOpenWithRequestBuilder(event: StatisticsEventCatalogPush) -> RequestBuilder<Void> {
        let path = "/statistics/event/push/open/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: event)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Регистрация события приема push уведомления
     
     - parameter event: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putStatisticsEventPushReceived(event: StatisticsEventCatalogPush, completion: @escaping ((_ error: Error?) -> Void)) {
        putStatisticsEventPushReceivedWithRequestBuilder(event: event).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Регистрация события приема push уведомления
     - PUT /statistics/event/push/received/
     - Регистрация события приема push уведомления
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     
     - parameter event: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func putStatisticsEventPushReceivedWithRequestBuilder(event: StatisticsEventCatalogPush) -> RequestBuilder<Void> {
        let path = "/statistics/event/push/received/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: event)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
