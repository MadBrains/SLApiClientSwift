//
// CloudLoyaltyClient.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CloudLoyaltyClient: Codable {

    /** дата рождения Если год рождения неизвестен, возвращается 1900. */
    public var birthdate: String?
    /** баланс доступных бонусов */
    public var bonuses: Double?
    /** номер бонусной карты */
    public var card: Double?
    /** номер бонусной карты в виде строки */
    public var cardString: String?
    /** адрес электронной почты клиента */
    public var email: String?
    /** внешний идентификатор клиента */
    public var externalId: String?
    /** фамилия, имя и отчество одной строкой */
    public var fullName: String?
    /** пол клиента Значения: * 0 - пол неизвестен, * 1 - мужской, * 2 - женский */
    public var gender: Double?
    /** уровень клиента в программе лояльности */
    public var level: Double?
    /** имя */
    public var name: String?
    /** отчество */
    public var patronymicName: String?
    /** баланс ожидаемых бонусов */
    public var pendingBonuses: Double?
    /** номер телефона клиента */
    public var phoneNumber: String?
    /** фамилия */
    public var surname: String?


    public init(birthdate: String?, bonuses: Double?, card: Double?, cardString: String?, email: String?, externalId: String?, fullName: String?, gender: Double?, level: Double?, name: String?, patronymicName: String?, pendingBonuses: Double?, phoneNumber: String?, surname: String?) {
        self.birthdate = birthdate
        self.bonuses = bonuses
        self.card = card
        self.cardString = cardString
        self.email = email
        self.externalId = externalId
        self.fullName = fullName
        self.gender = gender
        self.level = level
        self.name = name
        self.patronymicName = patronymicName
        self.pendingBonuses = pendingBonuses
        self.phoneNumber = phoneNumber
        self.surname = surname
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(birthdate, forKey: "birthdate")
        try container.encodeIfPresent(bonuses, forKey: "bonuses")
        try container.encodeIfPresent(card, forKey: "card")
        try container.encodeIfPresent(cardString, forKey: "cardString")
        try container.encodeIfPresent(email, forKey: "email")
        try container.encodeIfPresent(externalId, forKey: "externalId")
        try container.encodeIfPresent(fullName, forKey: "fullName")
        try container.encodeIfPresent(gender, forKey: "gender")
        try container.encodeIfPresent(level, forKey: "level")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(patronymicName, forKey: "patronymicName")
        try container.encodeIfPresent(pendingBonuses, forKey: "pendingBonuses")
        try container.encodeIfPresent(phoneNumber, forKey: "phoneNumber")
        try container.encodeIfPresent(surname, forKey: "surname")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                birthdate = try container.decodeIfPresent(String.self, forKey: "birthdate")
                bonuses = try container.decodeIfPresent(Double.self, forKey: "bonuses")
                card = try container.decodeIfPresent(Double.self, forKey: "card")
                cardString = try container.decodeIfPresent(String.self, forKey: "cardString")
                email = try container.decodeIfPresent(String.self, forKey: "email")
                externalId = try container.decodeIfPresent(String.self, forKey: "externalId")
                fullName = try container.decodeIfPresent(String.self, forKey: "fullName")
                gender = try container.decodeIfPresent(Double.self, forKey: "gender")
                level = try container.decodeIfPresent(Double.self, forKey: "level")
                name = try container.decodeIfPresent(String.self, forKey: "name")
                patronymicName = try container.decodeIfPresent(String.self, forKey: "patronymicName")
                pendingBonuses = try container.decodeIfPresent(Double.self, forKey: "pendingBonuses")
                phoneNumber = try container.decodeIfPresent(String.self, forKey: "phoneNumber")
                surname = try container.decodeIfPresent(String.self, forKey: "surname")
    }
}

