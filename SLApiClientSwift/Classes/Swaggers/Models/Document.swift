//
// Document.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Документ */

open class Document: Codable {

    public enum ModelType: String, Codable { 
        case textPlain = "text_plain"
        case textHtml = "text_html"
        case applicationJson = "application_json"
    }
    /** Таймштамп создания (Unix) */
    public var createdAt: Int64?
    /** Идентификатор создателя */
    public var creator: UUID?
    /** Идентификатор документа. */
    public var id: UUID?
    /** Флаг означающий автоматически импортирована сущьность или нет */
    public var _import: Bool?
    /** Название документа */
    public var name: String
    /** Идентификатор родительской группы */
    public var parent: UUID?
    /** Тип содержимого */
    public var type: ModelType
    /** Таймштамп модификации (Unix) */
    public var updatedAt: Int64?


    public init(createdAt: Int64?, creator: UUID?, id: UUID?, _import: Bool?, name: String, parent: UUID?, type: ModelType, updatedAt: Int64?) {
        self.createdAt = createdAt
        self.creator = creator
        self.id = id
        self._import = _import
        self.name = name
        self.parent = parent
        self.type = type
        self.updatedAt = updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(createdAt, forKey: "created_at")
        try container.encodeIfPresent(creator, forKey: "creator")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(_import, forKey: "import")
        try container.encode(name, forKey: "name")
        try container.encodeIfPresent(parent, forKey: "parent")
        try container.encode(type, forKey: "type")
        try container.encodeIfPresent(updatedAt, forKey: "updated_at")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                createdAt = try container.decodeIfPresent(Int64.self, forKey: "created_at")
                creator = try container.decodeIfPresent(UUID.self, forKey: "creator")
                id = try container.decodeIfPresent(UUID.self, forKey: "id")
                _import = try container.decodeIfPresent(Bool.self, forKey: "import")
                name = try container.decode(String.self, forKey: "name")
                parent = try container.decodeIfPresent(UUID.self, forKey: "parent")
                type = try container.decode(ModelType.self, forKey: "type")
                updatedAt = try container.decodeIfPresent(Int64.self, forKey: "updated_at")
    }
}

