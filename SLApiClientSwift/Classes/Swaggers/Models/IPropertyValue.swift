//
// IPropertyValue.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** property плюс строка - значение данного свойства */

open class IPropertyValue: Codable {

    public enum ModelType: String, Codable { 
        case ipstring = "ipString"
        case ipinteger = "ipInteger"
        case ipboolean = "ipBoolean"
        case ipfloat = "ipFloat"
        case ipobject = "ipObject"
        case ipoption = "ipOption"
        case ipimage = "ipImage"
    }
    public enum View: String, Codable { 
        case vnone = "vNone"
        case vrange = "vRange"
        case vselect = "vSelect"
        case vmultiselect = "vMultiSelect"
        case vcheckbox = "vCheckbox"
        case vpoint = "vPoint"
        case vimageurl = "vImageUrl"
        case vurl = "vUrl"
        case vinfosystemid = "vInfosystemId"
        case vinfosystemitemid = "vInfosystemItemId"
        case vcataloggroupid = "vCatalogGroupId"
        case vcatalogitemid = "vCatalogItemId"
        case vshopgroupid = "vShopGroupId"
        case vshopitemid = "vShopItemId"
        case vdocumentgroupid = "vDocumentGroupId"
        case vdocumentitemid = "vDocumentItemId"
        case vdocumentitemname = "vDocumentItemName"
        case vdate = "vDate"
        case vdatetime = "vDateTime"
    }
    /** Содержимое зависит от view * vNone - Специальный тип объекта. Служит для обозначения скрытых свойств, которые не отображаются в пользовательском интерфейсе. * vRange - Объект позволяет задать диапазон значений в формате [x,y], где x - минимальное значение, y - максимальное значение.  * vSelect - Хранит 1 значение заданной переменной. Может быть представлен в формате: string, integer, float, ipObject. * vMultiSelect - Массив, хранящий несколько вариантов значений (более 2). Позволяет осуществить множественный выбор. Может быть представлен в формате: string, integer, float, ipObject. * vCheckbox - Объект дополнительных параметров. Например: массив списка доступных вариантов значения       * vPoint - Объект типа ipObject. Отражает координаты заданной точки вида долгота (lat), широта (lon). Используется для задания координат на местности. Пример: { \&quot;lat\&quot;: 55.543543, \&quot;lon\&quot;: 63.2324 } * vImageUrl - Позволяет хранить ссылку в формате url на любое изображение в интернет пространстве. Пример: https://octodex.github.com/images/dojocat.jpg * vUrl - Хранить ссылку в формате string на любой внешний элемент в интернет пространстве. Пример: https://ru.wikipedia.org * vDate - Хранит дату по стандарту RFC3339 (год-месяц-день). Задается в формате string. Пример: 2017-07-21 * vDateTime - Хранит дату и время по стандарту RFC3339. Задается в формате string. Пример: 1995-12-01T12:00:27.87+00:20  */
    public var extra: Any?
    /** Флаг означающий автоматически импортирована сущность или нет */
    public var _import: Bool?
    /** Ключ, уникальный в рамках соответствующего блока (информационной системы, сервиса пользователей, каталога, заказов). Ключ может состоять только из цифр, латинских букв в верхнем и нижнем регистре, символов нижнего подчеркивания и тире. */
    public var key: String
    /** Название свойства */
    public var name: String?
    /** Тип свойства */
    public var type: ModelType
    /** Описание объектов    * vNone - специальный тип (скрытое свойство)   * vRange - указание промежутка   * vSelect - выбор пользователем 1 значения из списка    * vMultiSelect - множественный выбор значений из списка   * vCheckbox - управление параметром с двумя состояниями   * vPoint - любая точка вида ipObject   * vImageUrl - ссылка на изображение    * vUrl - любая ссылка в формате string   * vInfosystemId - хранит идентификатор информационной системы    * vInfosystemItemId - хранит идентификатор элемента   * vCatalogGroupId - хранит идентификатор группы каталога    * vCatalogItemId - хранит идентификатор элемента каталога   * vShopGroupId - хранит идентификатор группы магазина    * vShopItemId - хранит идентификатор элемента магазина   * vDocumentGroupId - хранит идентификатор группы документа   * vDocumentItemId - хранит идентификатор элемента документа   * vDocumentItemName - хранит идентификатор элемента документа (название)   * vDate - дата   * vDateTime - дата и время   */
    public var view: View?
    public var value: [Any]?


    public init(extra: Any?, _import: Bool?, key: String, name: String?, type: ModelType, view: View?, value: [Any]?) {
        self.extra = extra
        self._import = _import
        self.key = key
        self.name = name
        self.type = type
        self.view = view
        self.value = value
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(extra, forKey: "extra")
        try container.encodeIfPresent(_import, forKey: "import")
        try container.encode(key, forKey: "key")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encode(type, forKey: "type")
        try container.encodeIfPresent(view, forKey: "view")
        try container.encodeIfPresent(value, forKey: "value")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                extra = try container.decodeIfPresent(Any.self, forKey: "extra")
                _import = try container.decodeIfPresent(Bool.self, forKey: "import")
                key = try container.decode(String.self, forKey: "key")
                name = try container.decodeIfPresent(String.self, forKey: "name")
                type = try container.decode(ModelType.self, forKey: "type")
                view = try container.decodeIfPresent(View.self, forKey: "view")
                value = try container.decodeIfPresent([Any].self, forKey: "value")
    }
}

