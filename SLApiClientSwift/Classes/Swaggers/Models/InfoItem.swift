//
// InfoItem.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Элемент информационной системы */

open class InfoItem: Codable {

    /** Полный текст */
    public var body: String?
    /** Таймштамп создания (Unix) */
    public var createdAt: Int64?
    /** Идентификатор создателя */
    public var creator: UUID?
    /** Короткое описание */
    public var description: String?
    /** Идентификатор */
    public var id: UUID?
    /** URL базового изображения */
    public var image: String?
    /** Флаг означающий автоматически импортирована сущьность или нет */
    public var _import: Bool?
    /** Название элемента */
    public var name: String
    /** Таймштамп модификации (Unix) */
    public var updatedAt: Int64?


    public init(body: String?, createdAt: Int64?, creator: UUID?, description: String?, id: UUID?, image: String?, _import: Bool?, name: String, updatedAt: Int64?) {
        self.body = body
        self.createdAt = createdAt
        self.creator = creator
        self.description = description
        self.id = id
        self.image = image
        self._import = _import
        self.name = name
        self.updatedAt = updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(body, forKey: "body")
        try container.encodeIfPresent(createdAt, forKey: "created_at")
        try container.encodeIfPresent(creator, forKey: "creator")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(image, forKey: "image")
        try container.encodeIfPresent(_import, forKey: "import")
        try container.encode(name, forKey: "name")
        try container.encodeIfPresent(updatedAt, forKey: "updated_at")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                body = try container.decodeIfPresent(String.self, forKey: "body")
                createdAt = try container.decodeIfPresent(Int64.self, forKey: "created_at")
                creator = try container.decodeIfPresent(UUID.self, forKey: "creator")
                description = try container.decodeIfPresent(String.self, forKey: "description")
                id = try container.decodeIfPresent(UUID.self, forKey: "id")
                image = try container.decodeIfPresent(String.self, forKey: "image")
                _import = try container.decodeIfPresent(Bool.self, forKey: "import")
                name = try container.decode(String.self, forKey: "name")
                updatedAt = try container.decodeIfPresent(Int64.self, forKey: "updated_at")
    }
}

