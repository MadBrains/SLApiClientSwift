//
// OrderPayment.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class OrderPayment: Codable {

    public enum Status: String, Codable { 
        case approved = "approved"
        case deposited = "deposited"
        case reversed = "reversed"
        case refunded = "refunded"
        case declinedbytimeout = "declinedByTimeout"
        case _none = "none"
    }
    /** Сумма платежа в копейках */
    public var amount: Int64?
    /** Уникальный номер заказа в системе платёжного шлюза (UUID) */
    public var id: UUID
    /** Флаг успешности платежа */
    public var isSuccessful: Bool
    /** Описание платежных статусов   * approved - заказ подтвержден   * deposited - заказ завершен   * reversed - заказ отменен   * refunded - произведен возврат средств по заказу   * declinedByTimeout - время сессии истекло   * none - статус неизвестен  */
    public var status: Status


    public init(amount: Int64?, id: UUID, isSuccessful: Bool, status: Status) {
        self.amount = amount
        self.id = id
        self.isSuccessful = isSuccessful
        self.status = status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(amount, forKey: "amount")
        try container.encode(id, forKey: "id")
        try container.encode(isSuccessful, forKey: "isSuccessful")
        try container.encode(status, forKey: "status")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                amount = try container.decodeIfPresent(Int64.self, forKey: "amount")
                id = try container.decode(UUID.self, forKey: "id")
                isSuccessful = try container.decode(Bool.self, forKey: "isSuccessful")
                status = try container.decode(Status.self, forKey: "status")
    }
}

