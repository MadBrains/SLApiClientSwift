//
// OrderStatus.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Объект обновления статуса заказа */

open class OrderStatus: Codable {

    public enum IdType: String, Codable { 
        case id = "id"
        case number = "number"
    }
    public enum Status: String, Codable { 
        case cart = "cart"
        case create = "create"
        case confirmed = "confirmed"
        case await = "await"
        case pay = "pay"
        case delivery = "delivery"
        case complete = "complete"
        case cancelled = "cancelled"
        case rejected = "rejected"
    }
    /** Текст ошибки для статуса rejected (при отмене заказа). Может заменяться любым другим текстовым сообщением */
    public var error: String?
    /** Идентификатор заказа (UUID) из системы napoleon. Может быть ID или номером заказа в зависимости от idType.  */
    public var id: UUID
    /** Тип идентификатора (id или номер заказа) */
    public var idType: IdType?
    /** Статус заказа */
    public var status: Status


    public init(error: String?, id: UUID, idType: IdType?, status: Status) {
        self.error = error
        self.id = id
        self.idType = idType
        self.status = status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(error, forKey: "error")
        try container.encode(id, forKey: "id")
        try container.encodeIfPresent(idType, forKey: "idType")
        try container.encode(status, forKey: "status")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                error = try container.decodeIfPresent(String.self, forKey: "error")
                id = try container.decode(UUID.self, forKey: "id")
                idType = try container.decodeIfPresent(IdType.self, forKey: "idType")
                status = try container.decode(Status.self, forKey: "status")
    }
}

