//
// PayRegisterSberbankRequest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Тело запроса регистрации заказа */

open class PayRegisterSberbankRequest: Codable {

    /** Идентификатор созданной ранее связки. Может использоваться, только если у продавца есть разрешение на работу со связками. */
    public var bindingId: String?
    /** Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. Адрес должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru) */
    public var failUrl: String?
    /** Идентификатор заказа */
    public var orderId: String
    /** Адрес, на который требуется перенаправить пользователя в случае успешной оплаты. Адрес должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru) */
    public var returnUrl: String?


    public init(bindingId: String?, failUrl: String?, orderId: String, returnUrl: String?) {
        self.bindingId = bindingId
        self.failUrl = failUrl
        self.orderId = orderId
        self.returnUrl = returnUrl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(bindingId, forKey: "bindingId")
        try container.encodeIfPresent(failUrl, forKey: "failUrl")
        try container.encode(orderId, forKey: "orderId")
        try container.encodeIfPresent(returnUrl, forKey: "returnUrl")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                bindingId = try container.decodeIfPresent(String.self, forKey: "bindingId")
                failUrl = try container.decodeIfPresent(String.self, forKey: "failUrl")
                orderId = try container.decode(String.self, forKey: "orderId")
                returnUrl = try container.decodeIfPresent(String.self, forKey: "returnUrl")
    }
}

