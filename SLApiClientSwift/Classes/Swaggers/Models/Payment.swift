//
// Payment.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Данные об оплате заказа */

open class Payment: Codable {

    public enum Status: String, Codable { 
        case _none = "NONE"
        case created = "CREATED"
        case approved = "APPROVED"
        case deposited = "DEPOSITED"
        case declined = "DECLINED"
        case reversed = "REVERSED"
        case refunded = "REFUNDED"
    }
    /** Стоимость к оплате */
    public var amount: Double?
    /** Является ли заказ оплаченным */
    public var isPayed: Bool?
    /** Идентификатор оплаты в платежном шлюзе */
    public var paymentId: UUID?
    /** Статус оплаты */
    public var status: Status?
    public var type: OrdersV2PaymentType?


    public init(amount: Double?, isPayed: Bool?, paymentId: UUID?, status: Status?, type: OrdersV2PaymentType?) {
        self.amount = amount
        self.isPayed = isPayed
        self.paymentId = paymentId
        self.status = status
        self.type = type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(amount, forKey: "amount")
        try container.encodeIfPresent(isPayed, forKey: "isPayed")
        try container.encodeIfPresent(paymentId, forKey: "paymentId")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(type, forKey: "type")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                amount = try container.decodeIfPresent(Double.self, forKey: "amount")
                isPayed = try container.decodeIfPresent(Bool.self, forKey: "isPayed")
                paymentId = try container.decodeIfPresent(UUID.self, forKey: "paymentId")
                status = try container.decodeIfPresent(Status.self, forKey: "status")
                type = try container.decodeIfPresent(OrdersV2PaymentType.self, forKey: "type")
    }
}

