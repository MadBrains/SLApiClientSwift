//
// CollectionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CollectionsAPI {
    /**
     Запросить список коллекций
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStaticCollection(completion: @escaping ((_ data: [Collection]?,_ error: Error?) -> Void)) {
        getStaticCollectionWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Запросить список коллекций
     - GET /static/collection/
     - Запрос списка существующих коллекций
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=[ {
  "import" : true,
  "key" : "key"
}, {
  "import" : true,
  "key" : "key"
} ]}]

     - returns: RequestBuilder<[Collection]> 
     */
    open class func getStaticCollectionWithRequestBuilder() -> RequestBuilder<[Collection]> {
        let path = "/static/collection/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Collection]>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Запросить все кортежи
     
     - parameter collectionKey: (path) Ключ коллекции 
     - parameter limit: (query) Количество выбираемых элементов (optional, default to 50)
     - parameter offset: (query) Смещение от начала выборки (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStaticCollectionByCollectionkeyTupleAll(collectionKey: String, limit: Int64? = nil, offset: Int64? = nil, completion: @escaping ((_ data: [[CollectionRow]]?,_ error: Error?) -> Void)) {
        getStaticCollectionByCollectionkeyTupleAllWithRequestBuilder(collectionKey: collectionKey, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Запросить все кортежи
     - GET /static/collection/{collectionKey}/tuple/all/
     - Запрос всех кортежей, принадлежащих к указанной коллекции
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=[ [ {
  "value" : "value",
  "key" : "key"
}, {
  "value" : "value",
  "key" : "key"
} ], [ {
  "value" : "value",
  "key" : "key"
}, {
  "value" : "value",
  "key" : "key"
} ] ]}]
     
     - parameter collectionKey: (path) Ключ коллекции 
     - parameter limit: (query) Количество выбираемых элементов (optional, default to 50)
     - parameter offset: (query) Смещение от начала выборки (optional, default to 0)

     - returns: RequestBuilder<[[CollectionRow]]> 
     */
    open class func getStaticCollectionByCollectionkeyTupleAllWithRequestBuilder(collectionKey: String, limit: Int64? = nil, offset: Int64? = nil) -> RequestBuilder<[[CollectionRow]]> {
        var path = "/static/collection/{collectionKey}/tuple/all/"
        path = path.replacingOccurrences(of: "{collectionKey}", with: "\(collectionKey)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<[[CollectionRow]]>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Запросить кортеж
     
     - parameter collectionKey: (path) Ключ коллекции 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postStaticCollectionByCollectionkeyTupleSelect(collectionKey: String, body: CollectionRow, completion: @escaping ((_ data: [[CollectionRow]]?,_ error: Error?) -> Void)) {
        postStaticCollectionByCollectionkeyTupleSelectWithRequestBuilder(collectionKey: collectionKey, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Запросить кортеж
     - POST /static/collection/{collectionKey}/tuple/select/
     - Запрос кортежа по ключу
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=[ [ {
  "value" : "value",
  "key" : "key"
}, {
  "value" : "value",
  "key" : "key"
} ], [ {
  "value" : "value",
  "key" : "key"
}, {
  "value" : "value",
  "key" : "key"
} ] ]}]
     
     - parameter collectionKey: (path) Ключ коллекции 
     - parameter body: (body)  

     - returns: RequestBuilder<[[CollectionRow]]> 
     */
    open class func postStaticCollectionByCollectionkeyTupleSelectWithRequestBuilder(collectionKey: String, body: CollectionRow) -> RequestBuilder<[[CollectionRow]]> {
        var path = "/static/collection/{collectionKey}/tuple/select/"
        path = path.replacingOccurrences(of: "{collectionKey}", with: "\(collectionKey)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[[CollectionRow]]>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
