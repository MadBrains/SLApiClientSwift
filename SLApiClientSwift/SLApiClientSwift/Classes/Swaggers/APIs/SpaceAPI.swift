//
// SpaceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SpaceAPI {
    /**
     Удалить пространство
     
     - parameter spaceKey: (path) Ключ пространства пользователя 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDynamicSpaceBySpacekey(spaceKey: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteDynamicSpaceBySpacekeyWithRequestBuilder(spaceKey: spaceKey).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Удалить пространство
     - DELETE /dynamic/space/{spaceKey}/
     - Удаление пространства пользователя
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     
     - parameter spaceKey: (path) Ключ пространства пользователя 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteDynamicSpaceBySpacekeyWithRequestBuilder(spaceKey: String) -> RequestBuilder<Void> {
        var path = "/dynamic/space/{spaceKey}/"
        path = path.replacingOccurrences(of: "{spaceKey}", with: "\(spaceKey)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Удалить кортеж
     
     - parameter spaceKey: (path) Ключ пространства пользователя 
     - parameter tupleId: (path) Идентификатор кортежа 
     - parameter spaceVersion: (query) Версия пространства пользователя 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDynamicSpaceBySpacekeyTuplesByTupleid(spaceKey: String, tupleId: String, spaceVersion: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteDynamicSpaceBySpacekeyTuplesByTupleidWithRequestBuilder(spaceKey: spaceKey, tupleId: tupleId, spaceVersion: spaceVersion).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Удалить кортеж
     - DELETE /dynamic/space/{spaceKey}/tuples/{tupleId}/
     - Удалить кортеж из системы
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     
     - parameter spaceKey: (path) Ключ пространства пользователя 
     - parameter tupleId: (path) Идентификатор кортежа 
     - parameter spaceVersion: (query) Версия пространства пользователя 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteDynamicSpaceBySpacekeyTuplesByTupleidWithRequestBuilder(spaceKey: String, tupleId: String, spaceVersion: Int64) -> RequestBuilder<Void> {
        var path = "/dynamic/space/{spaceKey}/tuples/{tupleId}/"
        path = path.replacingOccurrences(of: "{spaceKey}", with: "\(spaceKey)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{tupleId}", with: "\(tupleId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "spaceVersion": spaceVersion.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Запросить информацию о пространстве
     
     - parameter spaceKey: (path) Ключ пространства пользователя 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDynamicSpaceBySpacekey(spaceKey: String, completion: @escaping ((_ data: UserSpaceResponse?,_ error: Error?) -> Void)) {
        getDynamicSpaceBySpacekeyWithRequestBuilder(spaceKey: spaceKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Запросить информацию о пространстве
     - GET /dynamic/space/{spaceKey}/
     - Запрос информации о пространстве по ключу
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "spaceKey" : "spaceKey",
  "current" : 0,
  "versions" : [ 6, 6 ]
}}]
     
     - parameter spaceKey: (path) Ключ пространства пользователя 

     - returns: RequestBuilder<UserSpaceResponse> 
     */
    open class func getDynamicSpaceBySpacekeyWithRequestBuilder(spaceKey: String) -> RequestBuilder<UserSpaceResponse> {
        var path = "/dynamic/space/{spaceKey}/"
        path = path.replacingOccurrences(of: "{spaceKey}", with: "\(spaceKey)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserSpaceResponse>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Запросить кортеж пространства
     
     - parameter spaceKey: (path) Ключ пространства пользователя 
     - parameter tupleId: (path) Идентификатор кортежа 
     - parameter spaceVersion: (query) Версия пространства пользователя 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDynamicSpaceBySpacekeyTuplesByTupleid(spaceKey: String, tupleId: String, spaceVersion: Int64, completion: @escaping ((_ data: Tuple?,_ error: Error?) -> Void)) {
        getDynamicSpaceBySpacekeyTuplesByTupleidWithRequestBuilder(spaceKey: spaceKey, tupleId: tupleId, spaceVersion: spaceVersion).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Запросить кортеж пространства
     - GET /dynamic/space/{spaceKey}/tuples/{tupleId}/
     - Запрос кортежа пространства по ID
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "updated_at" : 6,
  "created_at" : 0,
  "id" : "id",
  "value" : "{}"
}}]
     
     - parameter spaceKey: (path) Ключ пространства пользователя 
     - parameter tupleId: (path) Идентификатор кортежа 
     - parameter spaceVersion: (query) Версия пространства пользователя 

     - returns: RequestBuilder<Tuple> 
     */
    open class func getDynamicSpaceBySpacekeyTuplesByTupleidWithRequestBuilder(spaceKey: String, tupleId: String, spaceVersion: Int64) -> RequestBuilder<Tuple> {
        var path = "/dynamic/space/{spaceKey}/tuples/{tupleId}/"
        path = path.replacingOccurrences(of: "{spaceKey}", with: "\(spaceKey)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{tupleId}", with: "\(tupleId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "spaceVersion": spaceVersion.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<Tuple>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Создать пространство
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDynamicSpace(body: UserSpace, completion: @escaping ((_ data: UserSpaceResponse?,_ error: Error?) -> Void)) {
        postDynamicSpaceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Создать пространство
     - POST /dynamic/space/
     - Создание пространства в зависимости от spaceKey и версии схемы
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "spaceKey" : "spaceKey",
  "current" : 0,
  "versions" : [ 6, 6 ]
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<UserSpaceResponse> 
     */
    open class func postDynamicSpaceWithRequestBuilder(body: UserSpace) -> RequestBuilder<UserSpaceResponse> {
        let path = "/dynamic/space/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserSpaceResponse>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Запросить кортежи пространства
     
     - parameter spaceKey: (path) Ключ пространства пользователя 
     - parameter spaceVersion: (query) Версия пространства пользователя 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDynamicSpaceBySpacekeyQuery(spaceKey: String, spaceVersion: Int64, body: TupleQuery, completion: @escaping ((_ data: [Tuple]?,_ error: Error?) -> Void)) {
        postDynamicSpaceBySpacekeyQueryWithRequestBuilder(spaceKey: spaceKey, spaceVersion: spaceVersion, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Запросить кортежи пространства
     - POST /dynamic/space/{spaceKey}/query/
     - Запрос кортежей пространства
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=[ {
  "updated_at" : 6,
  "created_at" : 0,
  "id" : "id",
  "value" : "{}"
}, {
  "updated_at" : 6,
  "created_at" : 0,
  "id" : "id",
  "value" : "{}"
} ]}]
     
     - parameter spaceKey: (path) Ключ пространства пользователя 
     - parameter spaceVersion: (query) Версия пространства пользователя 
     - parameter body: (body)  

     - returns: RequestBuilder<[Tuple]> 
     */
    open class func postDynamicSpaceBySpacekeyQueryWithRequestBuilder(spaceKey: String, spaceVersion: Int64, body: TupleQuery) -> RequestBuilder<[Tuple]> {
        var path = "/dynamic/space/{spaceKey}/query/"
        path = path.replacingOccurrences(of: "{spaceKey}", with: "\(spaceKey)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "spaceVersion": spaceVersion.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<[Tuple]>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Вставить кортеж
     
     - parameter spaceKey: (path) Ключ пространства пользователя 
     - parameter spaceVersion: (query) Версия пространства пользователя 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDynamicSpaceBySpacekeyTuples(spaceKey: String, spaceVersion: Int64, body: Tuple, completion: @escaping ((_ data: Tuple?,_ error: Error?) -> Void)) {
        postDynamicSpaceBySpacekeyTuplesWithRequestBuilder(spaceKey: spaceKey, spaceVersion: spaceVersion, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Вставить кортеж
     - POST /dynamic/space/{spaceKey}/tuples/
     - Вставка кортежа
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "updated_at" : 6,
  "created_at" : 0,
  "id" : "id",
  "value" : "{}"
}}]
     
     - parameter spaceKey: (path) Ключ пространства пользователя 
     - parameter spaceVersion: (query) Версия пространства пользователя 
     - parameter body: (body)  

     - returns: RequestBuilder<Tuple> 
     */
    open class func postDynamicSpaceBySpacekeyTuplesWithRequestBuilder(spaceKey: String, spaceVersion: Int64, body: Tuple) -> RequestBuilder<Tuple> {
        var path = "/dynamic/space/{spaceKey}/tuples/"
        path = path.replacingOccurrences(of: "{spaceKey}", with: "\(spaceKey)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "spaceVersion": spaceVersion.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<Tuple>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Обновить кортеж
     
     - parameter spaceKey: (path) Ключ пространства пользователя 
     - parameter tupleId: (path) Идентификатор кортежа 
     - parameter spaceVersion: (query) Версия пространства пользователя 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDynamicSpaceBySpacekeyTuplesByTupleid(spaceKey: String, tupleId: String, spaceVersion: Int64, body: Tuple, completion: @escaping ((_ data: Tuple?,_ error: Error?) -> Void)) {
        postDynamicSpaceBySpacekeyTuplesByTupleidWithRequestBuilder(spaceKey: spaceKey, tupleId: tupleId, spaceVersion: spaceVersion, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Обновить кортеж
     - POST /dynamic/space/{spaceKey}/tuples/{tupleId}/
     - Обновляет ранее созданный кортеж 
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "updated_at" : 6,
  "created_at" : 0,
  "id" : "id",
  "value" : "{}"
}}]
     
     - parameter spaceKey: (path) Ключ пространства пользователя 
     - parameter tupleId: (path) Идентификатор кортежа 
     - parameter spaceVersion: (query) Версия пространства пользователя 
     - parameter body: (body)  

     - returns: RequestBuilder<Tuple> 
     */
    open class func postDynamicSpaceBySpacekeyTuplesByTupleidWithRequestBuilder(spaceKey: String, tupleId: String, spaceVersion: Int64, body: Tuple) -> RequestBuilder<Tuple> {
        var path = "/dynamic/space/{spaceKey}/tuples/{tupleId}/"
        path = path.replacingOccurrences(of: "{spaceKey}", with: "\(spaceKey)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{tupleId}", with: "\(tupleId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "spaceVersion": spaceVersion.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<Tuple>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
