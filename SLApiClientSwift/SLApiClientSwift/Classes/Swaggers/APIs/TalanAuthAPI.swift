//
// TalanAuthAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class TalanAuthAPI {
    /**
     Запросить код авторизации
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTalanAuthSigninCode(body: TalanCodeQuery, completion: @escaping ((_ data: ErrorModel?,_ error: Error?) -> Void)) {
        postTalanAuthSigninCodeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Запросить код авторизации
     - POST /talan/auth/signin/code/
     - Запрос кода авторизации. Если пользователь не найден, то происходит автоматическая регистрация.
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - examples: [{contentType=application/json, example={
  "code" : 140,
  "message" : "{}"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<ErrorModel> 
     */
    open class func postTalanAuthSigninCodeWithRequestBuilder(body: TalanCodeQuery) -> RequestBuilder<ErrorModel> {
        let path = "/talan/auth/signin/code/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ErrorModel>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Подтверждение кода авторизации
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTalanAuthSigninCodeConfirmation(body: TalanConfirmationQuery, completion: @escaping ((_ data: Signin?,_ error: Error?) -> Void)) {
        postTalanAuthSigninCodeConfirmationWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Подтверждение кода авторизации
     - POST /talan/auth/signin/code/confirmation/
     - Запрос позволяет осуществить подтверждение кода авторизации
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - examples: [{contentType=application/json, example={
  "x-token" : "x-token",
  "x-cid" : "x-cid",
  "x-uid" : "x-uid"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Signin> 
     */
    open class func postTalanAuthSigninCodeConfirmationWithRequestBuilder(body: TalanConfirmationQuery) -> RequestBuilder<Signin> {
        let path = "/talan/auth/signin/code/confirmation/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Signin>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Получение нового токена
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTalanAuthTokenRefresh(body: TalanRefreshQuery, completion: @escaping ((_ data: Signin?,_ error: Error?) -> Void)) {
        postTalanAuthTokenRefreshWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Получение нового токена
     - POST /talan/auth/token/refresh/
     - Запрос для пользователя нового токена, без необходимости подтверждать средство связи
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - examples: [{contentType=application/json, example={
  "x-token" : "x-token",
  "x-cid" : "x-cid",
  "x-uid" : "x-uid"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Signin> 
     */
    open class func postTalanAuthTokenRefreshWithRequestBuilder(body: TalanRefreshQuery) -> RequestBuilder<Signin> {
        let path = "/talan/auth/token/refresh/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Signin>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Подтверждение средства связи
     
     - parameter body: (body) Данные для подтверждения 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTalanAuthVerifyCommunication(body: TalanVerifyQuery, completion: @escaping ((_ data: ErrorModel?,_ error: Error?) -> Void)) {
        postTalanAuthVerifyCommunicationWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Подтверждение средства связи
     - POST /talan/auth/verify/communication/
     - Запрос на подтверждение средства связи (телефонный номер или email). Средство связи добавится пользоветелю
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "code" : 140,
  "message" : "{}"
}}]
     
     - parameter body: (body) Данные для подтверждения 

     - returns: RequestBuilder<ErrorModel> 
     */
    open class func postTalanAuthVerifyCommunicationWithRequestBuilder(body: TalanVerifyQuery) -> RequestBuilder<ErrorModel> {
        let path = "/talan/auth/verify/communication/"
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ErrorModel>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
