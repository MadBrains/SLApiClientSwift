//
// UsersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UsersAPI {
    /**
     Удаление свойства
     
     - parameter propertyKey: (path) Идентификатор свойства элемента 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDynamicUserPropertiesByPropertykey(propertyKey: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteDynamicUserPropertiesByPropertykeyWithRequestBuilder(propertyKey: propertyKey).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Удаление свойства
     - DELETE /dynamic/user/properties/{propertyKey}/
     - Удаление указанного свойства пользователя
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     
     - parameter propertyKey: (path) Идентификатор свойства элемента 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteDynamicUserPropertiesByPropertykeyWithRequestBuilder(propertyKey: String) -> RequestBuilder<Void> {
        var path = "/dynamic/user/properties/{propertyKey}/"
        path = path.replacingOccurrences(of: "{propertyKey}", with: "\(propertyKey)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Запрос информации о пользователе
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDynamicUserByUserid(userId: String, completion: @escaping ((_ data: UserWithRelations?,_ error: Error?) -> Void)) {
        getDynamicUserByUseridWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Запрос информации о пользователе
     - GET /dynamic/user/{userId}/
     - Запрос информации о пользователе
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter userId: (path) Идентификатор пользователя 

     - returns: RequestBuilder<UserWithRelations> 
     */
    open class func getDynamicUserByUseridWithRequestBuilder(userId: String) -> RequestBuilder<UserWithRelations> {
        var path = "/dynamic/user/{userId}/"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserWithRelations>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Запрос свойства пользователя
     
     - parameter propertyKey: (path) Идентификатор свойства элемента 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDynamicUserPropertiesByPropertykey(propertyKey: String, completion: @escaping ((_ data: IProperty?,_ error: Error?) -> Void)) {
        getDynamicUserPropertiesByPropertykeyWithRequestBuilder(propertyKey: propertyKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Запрос свойства пользователя
     - GET /dynamic/user/properties/{propertyKey}/
     - Выводит структуру запрашиваемого свойства по его идентификатору
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example={
  "view" : "vNone",
  "import" : true,
  "extra" : "{}",
  "name" : "name",
  "type" : "ipString",
  "key" : "key"
}}]
     
     - parameter propertyKey: (path) Идентификатор свойства элемента 

     - returns: RequestBuilder<IProperty> 
     */
    open class func getDynamicUserPropertiesByPropertykeyWithRequestBuilder(propertyKey: String) -> RequestBuilder<IProperty> {
        var path = "/dynamic/user/properties/{propertyKey}/"
        path = path.replacingOccurrences(of: "{propertyKey}", with: "\(propertyKey)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<IProperty>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Обновлении информации о пользователе
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter body: (body) Объект обновляемого пользователя 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDynamicUserByUserid(userId: String, body: UserWithRelations, completion: @escaping ((_ data: UserWithRelations?,_ error: Error?) -> Void)) {
        postDynamicUserByUseridWithRequestBuilder(userId: userId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Обновлении информации о пользователе
     - POST /dynamic/user/{userId}/
     - Обновление информации о пользователе
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter body: (body) Объект обновляемого пользователя 

     - returns: RequestBuilder<UserWithRelations> 
     */
    open class func postDynamicUserByUseridWithRequestBuilder(userId: String, body: UserWithRelations) -> RequestBuilder<UserWithRelations> {
        var path = "/dynamic/user/{userId}/"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserWithRelations>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Обновление информации о пользователе для внешних запросов
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter body: (body) Объект обновляемого пользователя 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDynamicUserUpdateByUserid(userId: String, body: UserWithRelations, completion: @escaping ((_ data: UserWithRelations?,_ error: Error?) -> Void)) {
        postDynamicUserUpdateByUseridWithRequestBuilder(userId: userId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Обновление информации о пользователе для внешних запросов
     - POST /dynamic/user/update/{userId}/
     - Обновление информации о пользователе для внешних запросов
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter body: (body) Объект обновляемого пользователя 

     - returns: RequestBuilder<UserWithRelations> 
     */
    open class func postDynamicUserUpdateByUseridWithRequestBuilder(userId: String, body: UserWithRelations) -> RequestBuilder<UserWithRelations> {
        var path = "/dynamic/user/update/{userId}/"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserWithRelations>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Добавление средства связи
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putDynamicUserByUseridCommunication(userId: String, body: Communication, completion: @escaping ((_ error: Error?) -> Void)) {
        putDynamicUserByUseridCommunicationWithRequestBuilder(userId: userId, body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Добавление средства связи
     - PUT /dynamic/user/{userId}/communication/
     - Добавить средство связи для конкретного пользователя по userID
     - API Key:
       - type: apiKey x-cid 
       - name: x-cid
     - API Key:
       - type: apiKey x-token 
       - name: x-token
     
     - parameter userId: (path) Идентификатор пользователя 
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func putDynamicUserByUseridCommunicationWithRequestBuilder(userId: String, body: Communication) -> RequestBuilder<Void> {
        var path = "/dynamic/user/{userId}/communication/"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SLApiClientSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SLApiClientSwiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
