//
// AfterSearch.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Поисковый запрос для перебора всех данных в ES через search_after */

open class AfterSearch: Codable {

    /** Идентификатор обекта после которого продолжить поиск, если не задан то вернется результат с начала */
    public var after: String?
    public var filter: SearchFilter?
    /** Количество выбираемых элементов */
    public var limit: Int64?
    /** Список полей, которые необходимо получить из индекса */
    public var only: [String]?
    /** Поисковая строка */
    public var query: String?


    public init(after: String?, filter: SearchFilter?, limit: Int64?, only: [String]?, query: String?) {
        self.after = after
        self.filter = filter
        self.limit = limit
        self.only = only
        self.query = query
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(after, forKey: "after")
        try container.encodeIfPresent(filter, forKey: "filter")
        try container.encodeIfPresent(limit, forKey: "limit")
        try container.encodeIfPresent(only, forKey: "only")
        try container.encodeIfPresent(query, forKey: "query")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                after = try container.decodeIfPresent(String.self, forKey: "after")
                filter = try container.decodeIfPresent(SearchFilter.self, forKey: "filter")
                limit = try container.decodeIfPresent(Int64.self, forKey: "limit")
                only = try container.decodeIfPresent([String].self, forKey: "only")
                query = try container.decodeIfPresent(String.self, forKey: "query")
    }
}

