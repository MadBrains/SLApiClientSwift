//
// Aggregation.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Правило агрегации */

open class Aggregation: Codable {

    public enum Mode: String, Codable { 
        case sum = "sum"
        case min = "min"
        case avg = "avg"
        case max = "max"
        case terms = "terms"
    }
    /** Название поля. */
    public var field: String
    public var filter: SearchFilter?
    /** Описание параметров фильтрации    * sum - сумма   * min - минимальное значение   * avg - среднее значение   * max - максимальное значение   * terms - выборка из всех вариантов значений. Необходимо использовать вместе с size для исключения большой выборки и наложения ограничения.  */
    public var mode: Mode
    /** Название агрегации в ответе */
    public var name: String?
    /** Количество выбираемых  в ответе агрегации */
    public var size: Int64?


    public init(field: String, filter: SearchFilter?, mode: Mode, name: String?, size: Int64?) {
        self.field = field
        self.filter = filter
        self.mode = mode
        self.name = name
        self.size = size
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(field, forKey: "field")
        try container.encodeIfPresent(filter, forKey: "filter")
        try container.encode(mode, forKey: "mode")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(size, forKey: "size")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                field = try container.decode(String.self, forKey: "field")
                filter = try container.decodeIfPresent(SearchFilter.self, forKey: "filter")
                mode = try container.decode(Mode.self, forKey: "mode")
                name = try container.decodeIfPresent(String.self, forKey: "name")
                size = try container.decodeIfPresent(Int64.self, forKey: "size")
    }
}

