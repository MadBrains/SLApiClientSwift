//
// CartItem.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Объект товара */

open class CartItem: Codable {

    public enum Unit: String, Codable { 
        case pc = "pc"
        case l = "l"
        case ml = "ml"
        case kg = "kg"
        case g = "g"
    }
    /** Идентификатор в каталоге */
    public var catalogItemId: UUID?
    public var data: CartItemData?
    /** Цена товара со скидкой */
    public var discountPrice: Double?
    /** Идентификатор в корзине */
    public var id: UUID?
    /** Чему равна единица товара в единицах измерения */
    public var portion: Double?
    /** Цена товара */
    public var price: Double?
    /** Количество единиц товара */
    public var quantity: Int?
    /** Единицы измерения товара */
    public var unit: Unit?


    public init(catalogItemId: UUID?, data: CartItemData?, discountPrice: Double?, id: UUID?, portion: Double?, price: Double?, quantity: Int?, unit: Unit?) {
        self.catalogItemId = catalogItemId
        self.data = data
        self.discountPrice = discountPrice
        self.id = id
        self.portion = portion
        self.price = price
        self.quantity = quantity
        self.unit = unit
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(catalogItemId, forKey: "catalogItemId")
        try container.encodeIfPresent(data, forKey: "data")
        try container.encodeIfPresent(discountPrice, forKey: "discountPrice")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(portion, forKey: "portion")
        try container.encodeIfPresent(price, forKey: "price")
        try container.encodeIfPresent(quantity, forKey: "quantity")
        try container.encodeIfPresent(unit, forKey: "unit")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                catalogItemId = try container.decodeIfPresent(UUID.self, forKey: "catalogItemId")
                data = try container.decodeIfPresent(CartItemData.self, forKey: "data")
                discountPrice = try container.decodeIfPresent(Double.self, forKey: "discountPrice")
                id = try container.decodeIfPresent(UUID.self, forKey: "id")
                portion = try container.decodeIfPresent(Double.self, forKey: "portion")
                price = try container.decodeIfPresent(Double.self, forKey: "price")
                quantity = try container.decodeIfPresent(Int.self, forKey: "quantity")
                unit = try container.decodeIfPresent(Unit.self, forKey: "unit")
    }
}

