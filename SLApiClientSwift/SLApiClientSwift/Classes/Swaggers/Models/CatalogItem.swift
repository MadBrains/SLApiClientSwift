//
// CatalogItem.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Элемент каталога */

open class CatalogItem: Codable {

    public enum Measure: String, Codable { 
        case u = "u"
        case kg = "kg"
        case gm = "gm"
        case lit = "lit"
        case mlit = "mlit"
        case sec = "sec"
        case day = "day"
        case hour = "hour"
    }
    /** Список псевдонимов названия товара */
    public var aliases: [String]?
    /** Цвет ярлыка товара в формате HEX RGB */
    public var badgeColor: String?
    /** Текст в ярлыке товара */
    public var badgeText: String?
    /** Полный текст */
    public var body: String?
    /** Идентификатор */
    public var cid: UUID?
    /** Таймштамп создания (Unix) */
    public var createdAt: Int64?
    /** Идентификатор создателя */
    public var creator: UUID?
    /** Короткое описание */
    public var description: String?
    /** Массив изображений товара */
    public var detailImages: [String]?
    /** Флаг отключения товара */
    public var disabled: Bool?
    /** Cкидочная цена на товар */
    public var discountPrice: Double?
    /** Флаг дополнительного товара */
    public var extraItem: Bool?
    /** Флаг скрытия товара */
    public var hidden: Bool?
    /** Идентификатор */
    public var id: UUID?
    /** URL изображения превью */
    public var image: String?
    /** Флаг, означающий автоматически импортирована сущность или нет */
    public var _import: Bool?
    /** Единица измерения   * u - единица   * kg - килограмм   * gm - грамм   * lit - литр   * mlit - миллилитр   * sec - секунды   * day - дни   * hour - часы  */
    public var measure: Measure?
    /** Название */
    public var name: String?
    /** Стоимость товара */
    public var price: Double?
    /** Идентификатор заказа во внешней системе (кассовый сервер, 1С и т.д.) */
    public var remoteId: String?
    /** Id шаблона */
    public var templateId: UUID?
    /** Минимальная единица */
    public var unit: Double?
    /** Таймштамп модификации (Unix) */
    public var updatedAt: Int64?


    public init(aliases: [String]?, badgeColor: String?, badgeText: String?, body: String?, cid: UUID?, createdAt: Int64?, creator: UUID?, description: String?, detailImages: [String]?, disabled: Bool?, discountPrice: Double?, extraItem: Bool?, hidden: Bool?, id: UUID?, image: String?, _import: Bool?, measure: Measure?, name: String?, price: Double?, remoteId: String?, templateId: UUID?, unit: Double?, updatedAt: Int64?) {
        self.aliases = aliases
        self.badgeColor = badgeColor
        self.badgeText = badgeText
        self.body = body
        self.cid = cid
        self.createdAt = createdAt
        self.creator = creator
        self.description = description
        self.detailImages = detailImages
        self.disabled = disabled
        self.discountPrice = discountPrice
        self.extraItem = extraItem
        self.hidden = hidden
        self.id = id
        self.image = image
        self._import = _import
        self.measure = measure
        self.name = name
        self.price = price
        self.remoteId = remoteId
        self.templateId = templateId
        self.unit = unit
        self.updatedAt = updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(aliases, forKey: "aliases")
        try container.encodeIfPresent(badgeColor, forKey: "badgeColor")
        try container.encodeIfPresent(badgeText, forKey: "badgeText")
        try container.encodeIfPresent(body, forKey: "body")
        try container.encodeIfPresent(cid, forKey: "cid")
        try container.encodeIfPresent(createdAt, forKey: "created_at")
        try container.encodeIfPresent(creator, forKey: "creator")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(detailImages, forKey: "detailImages")
        try container.encodeIfPresent(disabled, forKey: "disabled")
        try container.encodeIfPresent(discountPrice, forKey: "discountPrice")
        try container.encodeIfPresent(extraItem, forKey: "extraItem")
        try container.encodeIfPresent(hidden, forKey: "hidden")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(image, forKey: "image")
        try container.encodeIfPresent(_import, forKey: "import")
        try container.encodeIfPresent(measure, forKey: "measure")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(price, forKey: "price")
        try container.encodeIfPresent(remoteId, forKey: "remoteId")
        try container.encodeIfPresent(templateId, forKey: "templateId")
        try container.encodeIfPresent(unit, forKey: "unit")
        try container.encodeIfPresent(updatedAt, forKey: "updated_at")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                aliases = try container.decodeIfPresent([String].self, forKey: "aliases")
                badgeColor = try container.decodeIfPresent(String.self, forKey: "badgeColor")
                badgeText = try container.decodeIfPresent(String.self, forKey: "badgeText")
                body = try container.decodeIfPresent(String.self, forKey: "body")
                cid = try container.decodeIfPresent(UUID.self, forKey: "cid")
                createdAt = try container.decodeIfPresent(Int64.self, forKey: "created_at")
                creator = try container.decodeIfPresent(UUID.self, forKey: "creator")
                description = try container.decodeIfPresent(String.self, forKey: "description")
                detailImages = try container.decodeIfPresent([String].self, forKey: "detailImages")
                disabled = try container.decodeIfPresent(Bool.self, forKey: "disabled")
                discountPrice = try container.decodeIfPresent(Double.self, forKey: "discountPrice")
                extraItem = try container.decodeIfPresent(Bool.self, forKey: "extraItem")
                hidden = try container.decodeIfPresent(Bool.self, forKey: "hidden")
                id = try container.decodeIfPresent(UUID.self, forKey: "id")
                image = try container.decodeIfPresent(String.self, forKey: "image")
                _import = try container.decodeIfPresent(Bool.self, forKey: "import")
                measure = try container.decodeIfPresent(Measure.self, forKey: "measure")
                name = try container.decodeIfPresent(String.self, forKey: "name")
                price = try container.decodeIfPresent(Double.self, forKey: "price")
                remoteId = try container.decodeIfPresent(String.self, forKey: "remoteId")
                templateId = try container.decodeIfPresent(UUID.self, forKey: "templateId")
                unit = try container.decodeIfPresent(Double.self, forKey: "unit")
                updatedAt = try container.decodeIfPresent(Int64.self, forKey: "updated_at")
    }
}

