//
// CatalogItemInShop.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Объект смежности товара и магазина */

open class CatalogItemInShop: Codable {

    public enum Measure: String, Codable { 
        case u = "u"
        case kg = "kg"
        case gm = "gm"
        case lit = "lit"
        case mlit = "mlit"
        case sec = "sec"
        case day = "day"
        case hour = "hour"
    }
    /** Цвет ярлыка товара в формате HEX RGB */
    public var badgeColor: String?
    /** Текст в ярлыке товара */
    public var badgeText: String?
    /** Идентификатор товара */
    public var catalogItemId: UUID
    /** Остаток товара в магазине */
    public var count: Double
    /** Cкидочная цена на товар */
    public var discountPrice: Double?
    /** Единица измерения   * u - единица   * kg - килограмм   * gm - грамм   * lit - литр   * mlit - миллилитр   * sec - секунды   * day - дни   * hour - часы  */
    public var measure: Measure?
    /** Стоимость товара в магазине */
    public var price: Double
    /** Идентификатор магазина */
    public var shopId: UUID


    public init(badgeColor: String?, badgeText: String?, catalogItemId: UUID, count: Double, discountPrice: Double?, measure: Measure?, price: Double, shopId: UUID) {
        self.badgeColor = badgeColor
        self.badgeText = badgeText
        self.catalogItemId = catalogItemId
        self.count = count
        self.discountPrice = discountPrice
        self.measure = measure
        self.price = price
        self.shopId = shopId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(badgeColor, forKey: "badgeColor")
        try container.encodeIfPresent(badgeText, forKey: "badgeText")
        try container.encode(catalogItemId, forKey: "catalogItemId")
        try container.encode(count, forKey: "count")
        try container.encodeIfPresent(discountPrice, forKey: "discountPrice")
        try container.encodeIfPresent(measure, forKey: "measure")
        try container.encode(price, forKey: "price")
        try container.encode(shopId, forKey: "shopId")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                badgeColor = try container.decodeIfPresent(String.self, forKey: "badgeColor")
                badgeText = try container.decodeIfPresent(String.self, forKey: "badgeText")
                catalogItemId = try container.decode(UUID.self, forKey: "catalogItemId")
                count = try container.decode(Double.self, forKey: "count")
                discountPrice = try container.decodeIfPresent(Double.self, forKey: "discountPrice")
                measure = try container.decodeIfPresent(Measure.self, forKey: "measure")
                price = try container.decode(Double.self, forKey: "price")
                shopId = try container.decode(UUID.self, forKey: "shopId")
    }
}

