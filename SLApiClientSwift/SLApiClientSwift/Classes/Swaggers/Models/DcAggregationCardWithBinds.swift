//
// DcAggregationCardWithBinds.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Модель дисконтной карты со вложенными связями к пользовател(ю/ям) */

open class DcAggregationCardWithBinds: Codable {

    public enum ModelType: String, Codable { 
        case discount = "discount"
        case bonus = "bonus"
    }
    /** Номер карты */
    public var number: String
    /** Размер бонуса */
    public var bonus: Float?
    /** Дополнительная информация о карте */
    public var description: String?
    /** Скидка по карте */
    public var discount: Float?
    /** Имя владельца карты */
    public var firstName: String?
    /** Фамилия владельца карты */
    public var lastName: String?
    /** Отчество/второе имя владельца карты */
    public var middleName: String?
    /** Номер телефона к которому привязана карта */
    public var phone: String?
    public var type: ModelType
    /** Список привязанных пользователей к карте */
    public var binds: [DcBind]?


    public init(number: String, bonus: Float?, description: String?, discount: Float?, firstName: String?, lastName: String?, middleName: String?, phone: String?, type: ModelType, binds: [DcBind]?) {
        self.number = number
        self.bonus = bonus
        self.description = description
        self.discount = discount
        self.firstName = firstName
        self.lastName = lastName
        self.middleName = middleName
        self.phone = phone
        self.type = type
        self.binds = binds
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(number, forKey: "number")
        try container.encodeIfPresent(bonus, forKey: "bonus")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(discount, forKey: "discount")
        try container.encodeIfPresent(firstName, forKey: "firstName")
        try container.encodeIfPresent(lastName, forKey: "lastName")
        try container.encodeIfPresent(middleName, forKey: "middleName")
        try container.encodeIfPresent(phone, forKey: "phone")
        try container.encode(type, forKey: "type")
        try container.encodeIfPresent(binds, forKey: "binds")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                number = try container.decode(String.self, forKey: "number")
                bonus = try container.decodeIfPresent(Float.self, forKey: "bonus")
                description = try container.decodeIfPresent(String.self, forKey: "description")
                discount = try container.decodeIfPresent(Float.self, forKey: "discount")
                firstName = try container.decodeIfPresent(String.self, forKey: "firstName")
                lastName = try container.decodeIfPresent(String.self, forKey: "lastName")
                middleName = try container.decodeIfPresent(String.self, forKey: "middleName")
                phone = try container.decodeIfPresent(String.self, forKey: "phone")
                type = try container.decode(ModelType.self, forKey: "type")
                binds = try container.decodeIfPresent([DcBind].self, forKey: "binds")
    }
}

