//
// OrderV2.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class OrderV2: Codable {

    /** Дата создания */
    public var creationTime: Date?
    /** Объект с кастомными полями. Объект, где ключи и значения должны быть строками. */
    public var customersData: Any?
    public var delivery: Delivery?
    /** Идентификатор заказа */
    public var id: UUID?
    public var items: CartItems?
    public var loyalty: Loyalty?
    /** Человекочитаемый номер заказа */
    public var number: String?
    public var payment: Payment?
    /** Идентификатор заказа в сторонней системе (для интеграции) */
    public var remoteId: String?
    public var status: OrdersV2Status?
    /** Дата обновления */
    public var updateTime: Date?
    /** Идентификатор пользователя */
    public var uid: UUID?


    public init(creationTime: Date?, customersData: Any?, delivery: Delivery?, id: UUID?, items: CartItems?, loyalty: Loyalty?, number: String?, payment: Payment?, remoteId: String?, status: OrdersV2Status?, updateTime: Date?, uid: UUID?) {
        self.creationTime = creationTime
        self.customersData = customersData
        self.delivery = delivery
        self.id = id
        self.items = items
        self.loyalty = loyalty
        self.number = number
        self.payment = payment
        self.remoteId = remoteId
        self.status = status
        self.updateTime = updateTime
        self.uid = uid
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(creationTime, forKey: "creationTime")
        try container.encodeIfPresent(customersData, forKey: "customersData")
        try container.encodeIfPresent(delivery, forKey: "delivery")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(items, forKey: "items")
        try container.encodeIfPresent(loyalty, forKey: "loyalty")
        try container.encodeIfPresent(number, forKey: "number")
        try container.encodeIfPresent(payment, forKey: "payment")
        try container.encodeIfPresent(remoteId, forKey: "remoteId")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(updateTime, forKey: "updateTime")
        try container.encodeIfPresent(uid, forKey: "uid")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                creationTime = try container.decodeIfPresent(Date.self, forKey: "creationTime")
                customersData = try container.decodeIfPresent(Any.self, forKey: "customersData")
                delivery = try container.decodeIfPresent(Delivery.self, forKey: "delivery")
                id = try container.decodeIfPresent(UUID.self, forKey: "id")
                items = try container.decodeIfPresent(CartItems.self, forKey: "items")
                loyalty = try container.decodeIfPresent(Loyalty.self, forKey: "loyalty")
                number = try container.decodeIfPresent(String.self, forKey: "number")
                payment = try container.decodeIfPresent(Payment.self, forKey: "payment")
                remoteId = try container.decodeIfPresent(String.self, forKey: "remoteId")
                status = try container.decodeIfPresent(OrdersV2Status.self, forKey: "status")
                updateTime = try container.decodeIfPresent(Date.self, forKey: "updateTime")
                uid = try container.decodeIfPresent(UUID.self, forKey: "uid")
    }
}

