//
// OrderV2Patch.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Объект с изменениями заказа */

open class OrderV2Patch: Codable {

    /** Объект с кастомными полями. Объект, где ключи и значения должны быть строками. */
    public var customersData: Any?
    public var delivery: Delivery?
    public var items: CartItems?
    public var loyalty: Loyalty?
    /** Идентификатор заказа во внешней системе */
    public var remoteId: String?


    public init(customersData: Any?, delivery: Delivery?, items: CartItems?, loyalty: Loyalty?, remoteId: String?) {
        self.customersData = customersData
        self.delivery = delivery
        self.items = items
        self.loyalty = loyalty
        self.remoteId = remoteId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(customersData, forKey: "customersData")
        try container.encodeIfPresent(delivery, forKey: "delivery")
        try container.encodeIfPresent(items, forKey: "items")
        try container.encodeIfPresent(loyalty, forKey: "loyalty")
        try container.encodeIfPresent(remoteId, forKey: "remoteId")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                customersData = try container.decodeIfPresent(Any.self, forKey: "customersData")
                delivery = try container.decodeIfPresent(Delivery.self, forKey: "delivery")
                items = try container.decodeIfPresent(CartItems.self, forKey: "items")
                loyalty = try container.decodeIfPresent(Loyalty.self, forKey: "loyalty")
                remoteId = try container.decodeIfPresent(String.self, forKey: "remoteId")
    }
}

