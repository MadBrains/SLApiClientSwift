//
// QueryShopsSearch.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Запрос выборки магазинов по заданным параметрам */

open class QueryShopsSearch: Codable {

    public enum Order: String, Codable { 
        case desc = "DESC"
        case asc = "ASC"
    }
    /** Список id товаров для которых есть запись стоимости и остатка */
    public var catalogItemIds: [String]?
    /** По какой группе производить выборку */
    public var group: String?
    /** Количество выбираемых элементов */
    public var limit: Int64?
    /** Смещение от начала выборки */
    public var offset: Int64?
    /** Порядок сортировки по полю указанному в orderBy */
    public var order: Order?
    /** Ключ, определяющий поле сортировки. Доступны так же ключи (Key) дополнительных свойств элементов */
    public var orderBy: String?
    /** Запрос по дополнительным параметрам и основным. Полное описание находится в шапке документа */
    public var query: Any?
    public var rectangle: Rectangle?


    public init(catalogItemIds: [String]?, group: String?, limit: Int64?, offset: Int64?, order: Order?, orderBy: String?, query: Any?, rectangle: Rectangle?) {
        self.catalogItemIds = catalogItemIds
        self.group = group
        self.limit = limit
        self.offset = offset
        self.order = order
        self.orderBy = orderBy
        self.query = query
        self.rectangle = rectangle
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(catalogItemIds, forKey: "catalogItemIds")
        try container.encodeIfPresent(group, forKey: "group")
        try container.encodeIfPresent(limit, forKey: "limit")
        try container.encodeIfPresent(offset, forKey: "offset")
        try container.encodeIfPresent(order, forKey: "order")
        try container.encodeIfPresent(orderBy, forKey: "orderBy")
        try container.encodeIfPresent(query, forKey: "query")
        try container.encodeIfPresent(rectangle, forKey: "rectangle")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                catalogItemIds = try container.decodeIfPresent([String].self, forKey: "catalogItemIds")
                group = try container.decodeIfPresent(String.self, forKey: "group")
                limit = try container.decodeIfPresent(Int64.self, forKey: "limit")
                offset = try container.decodeIfPresent(Int64.self, forKey: "offset")
                order = try container.decodeIfPresent(Order.self, forKey: "order")
                orderBy = try container.decodeIfPresent(String.self, forKey: "orderBy")
                query = try container.decodeIfPresent(Any.self, forKey: "query")
                rectangle = try container.decodeIfPresent(Rectangle.self, forKey: "rectangle")
    }
}

