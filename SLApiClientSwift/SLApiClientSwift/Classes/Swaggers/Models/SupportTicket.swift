//
// SupportTicket.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Обращение */

open class SupportTicket: Codable {

    public enum Status: String, Codable { 
        case new = "new"
        case open = "open"
        case pending = "pending"
        case resolved = "resolved"
        case closed = "closed"
    }
    /** Тело сообщения */
    public var body: String?
    public var properties: [IPropertyValue]?
    /** Название на латиннице (^[0-9a-zA-Z-_]+$) причины обращения */
    public var reason: String
    /** Заголовок обращения (Тема) */
    public var subject: String?
    /** Таймштамп создания (Unix) */
    public var created: Int64?
    /** Идентификатор */
    public var id: UUID?
    /** Идентификатор оператора (если не задан - выбирается первый из существующих) */
    public var operatorId: String?
    /** * new -  тикет создан, но еще не обрабатывается опетором (не назначен оператор); * open - тикет обрабатывается, но ответ еще не отправлен клиенту (возможны внутренние примечания к тикету, невидимые клиенту); * pending - тикет обработан, ожидается ответ от клиента на отправленный ответ от компании; * resolved - тикет решен, допускается ответы от клиента (в таком случае тикет повторно &#39;открывается&#39;);  * closed - тикет закрыт, новые обновления со стороны оператора или клиента невозможны  */
    public var status: Status?
    /** Таймштамп обновления (Unix) */
    public var updated: Int64?
    /** Идентификатор пользователя */
    public var userId: UUID


    public init(body: String?, properties: [IPropertyValue]?, reason: String, subject: String?, created: Int64?, id: UUID?, operatorId: String?, status: Status?, updated: Int64?, userId: UUID) {
        self.body = body
        self.properties = properties
        self.reason = reason
        self.subject = subject
        self.created = created
        self.id = id
        self.operatorId = operatorId
        self.status = status
        self.updated = updated
        self.userId = userId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(body, forKey: "body")
        try container.encodeIfPresent(properties, forKey: "properties")
        try container.encode(reason, forKey: "reason")
        try container.encodeIfPresent(subject, forKey: "subject")
        try container.encodeIfPresent(created, forKey: "created")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(operatorId, forKey: "operatorId")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(updated, forKey: "updated")
        try container.encode(userId, forKey: "userId")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                body = try container.decodeIfPresent(String.self, forKey: "body")
                properties = try container.decodeIfPresent([IPropertyValue].self, forKey: "properties")
                reason = try container.decode(String.self, forKey: "reason")
                subject = try container.decodeIfPresent(String.self, forKey: "subject")
                created = try container.decodeIfPresent(Int64.self, forKey: "created")
                id = try container.decodeIfPresent(UUID.self, forKey: "id")
                operatorId = try container.decodeIfPresent(String.self, forKey: "operatorId")
                status = try container.decodeIfPresent(Status.self, forKey: "status")
                updated = try container.decodeIfPresent(Int64.self, forKey: "updated")
                userId = try container.decode(UUID.self, forKey: "userId")
    }
}

