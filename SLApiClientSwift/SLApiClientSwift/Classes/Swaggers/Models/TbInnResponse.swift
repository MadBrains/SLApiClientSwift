//
// TbInnResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class TbInnResponse: Codable {

    /** Наименование банка */
    public var bankName: String?
    /** БИК */
    public var bik: String?
    /** Расчетный счет */
    public var checkingAccount: String?
    /** Электронная почта компании */
    public var companyEmail: String?
    /** Наименование компании */
    public var companyName: String?
    /** Телефон компании */
    public var companyPhone: String?
    /** Корреспондентский счет */
    public var correspondentAccount: String?
    /** ИНН */
    public var inn: String
    /** КПП */
    public var kpp: String?
    /** ОГРН */
    public var ogrn: String?
    /** ОГРНИП */
    public var ogrnip: String?
    /** Вид деятельности (ОКВЭД) */
    public var okved: [String]?


    public init(bankName: String?, bik: String?, checkingAccount: String?, companyEmail: String?, companyName: String?, companyPhone: String?, correspondentAccount: String?, inn: String, kpp: String?, ogrn: String?, ogrnip: String?, okved: [String]?) {
        self.bankName = bankName
        self.bik = bik
        self.checkingAccount = checkingAccount
        self.companyEmail = companyEmail
        self.companyName = companyName
        self.companyPhone = companyPhone
        self.correspondentAccount = correspondentAccount
        self.inn = inn
        self.kpp = kpp
        self.ogrn = ogrn
        self.ogrnip = ogrnip
        self.okved = okved
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(bankName, forKey: "bankName")
        try container.encodeIfPresent(bik, forKey: "bik")
        try container.encodeIfPresent(checkingAccount, forKey: "checkingAccount")
        try container.encodeIfPresent(companyEmail, forKey: "companyEmail")
        try container.encodeIfPresent(companyName, forKey: "companyName")
        try container.encodeIfPresent(companyPhone, forKey: "companyPhone")
        try container.encodeIfPresent(correspondentAccount, forKey: "correspondentAccount")
        try container.encode(inn, forKey: "inn")
        try container.encodeIfPresent(kpp, forKey: "kpp")
        try container.encodeIfPresent(ogrn, forKey: "ogrn")
        try container.encodeIfPresent(ogrnip, forKey: "ogrnip")
        try container.encodeIfPresent(okved, forKey: "okved")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

                bankName = try container.decodeIfPresent(String.self, forKey: "bankName")
                bik = try container.decodeIfPresent(String.self, forKey: "bik")
                checkingAccount = try container.decodeIfPresent(String.self, forKey: "checkingAccount")
                companyEmail = try container.decodeIfPresent(String.self, forKey: "companyEmail")
                companyName = try container.decodeIfPresent(String.self, forKey: "companyName")
                companyPhone = try container.decodeIfPresent(String.self, forKey: "companyPhone")
                correspondentAccount = try container.decodeIfPresent(String.self, forKey: "correspondentAccount")
                inn = try container.decode(String.self, forKey: "inn")
                kpp = try container.decodeIfPresent(String.self, forKey: "kpp")
                ogrn = try container.decodeIfPresent(String.self, forKey: "ogrn")
                ogrnip = try container.decodeIfPresent(String.self, forKey: "ogrnip")
                okved = try container.decodeIfPresent([String].self, forKey: "okved")
    }
}

